!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARMV6_OR_7	port/port_android.h	28;"	d
ASSERT_EQ	util/testharness.h	98;"	d
ASSERT_GE	util/testharness.h	100;"	d
ASSERT_GT	util/testharness.h	101;"	d
ASSERT_LE	util/testharness.h	102;"	d
ASSERT_LT	util/testharness.h	103;"	d
ASSERT_NE	util/testharness.h	99;"	d
ASSERT_OK	util/testharness.h	97;"	d
ASSERT_TRUE	util/testharness.h	96;"	d
ATTRIBUTE_WEAK	port/port_android.h	/^LinuxKernelMemoryBarrierFunc pLinuxKernelMemoryBarrier ATTRIBUTE_WEAK =$/;"	m	namespace:leveldb::port
Abandon	table/table_builder.cc	/^void TableBuilder::Abandon() {$/;"	f	class:leveldb::TableBuilder
Acquire_Load	port/port_android.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Acquire_Load	port/port_chromium.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Acquire_Load	port/port_posix.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Add	db/db_impl.h	/^    void Add(const CompactionStats& c) {$/;"	f	struct:leveldb::DBImpl::CompactionStats
Add	db/memtable.cc	/^void MemTable::Add(SequenceNumber s, ValueType type,$/;"	f	class:leveldb::MemTable
Add	table/block_builder.cc	/^void BlockBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::BlockBuilder
Add	table/table_builder.cc	/^void TableBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::TableBuilder
Add	table/table_test.cc	/^  void Add(const std::string& key, const Slice& value) {$/;"	f	class:leveldb::Constructor
Add	table/table_test.cc	/^  void Add(const std::string& key, const std::string& value) {$/;"	f	class:leveldb::Harness
Add	util/histogram.cc	/^void Histogram::Add(double value) {$/;"	f	class:leveldb::Histogram
AddFile	db/version_edit.h	/^  void AddFile(int level, uint64_t file,$/;"	f	class:leveldb::VersionEdit
AddInputDeletions	db/version_set.cc	/^void Compaction::AddInputDeletions(VersionEdit* edit) {$/;"	f	class:leveldb::Compaction
AddIterators	db/version_set.cc	/^void Version::AddIterators(const ReadOptions& options,$/;"	f	class:leveldb::Version
AddLiveFiles	db/version_set.cc	/^void VersionSet::AddLiveFiles(std::set<uint64_t>* live) {$/;"	f	class:leveldb::VersionSet
AddRecord	db/log_writer.cc	/^Status Writer::AddRecord(const Slice& slice) {$/;"	f	class:leveldb::log::Writer
AllEntriesFor	db/db_test.cc	/^  std::string AllEntriesFor(const Slice& user_key) {$/;"	f	class:leveldb::DBTest
Allocate	util/arena.h	/^inline char* Arena::Allocate(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateAligned	util/arena.cc	/^char* Arena::AllocateAligned(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFallback	util/arena.cc	/^char* Arena::AllocateFallback(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateNewBlock	util/arena.cc	/^char* Arena::AllocateNewBlock(size_t block_bytes) {$/;"	f	class:leveldb::Arena
Append	db/db_impl.cc	/^  virtual Status Append(const Slice& data) { return Status::OK(); }$/;"	f	class:leveldb::__anon1::NullWritableFile
Append	db/log_test.cc	/^    virtual Status Append(const Slice& slice) {$/;"	f	class:leveldb::log::LogTest::StringDest
Append	table/table_test.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::StringSink
Append	util/env_chromium.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon20::ChromiumWritableFile
Append	util/env_posix.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon17::PosixMmapFile
AppendEscapedStringTo	util/logging.cc	/^void AppendEscapedStringTo(std::string* str, const Slice& value) {$/;"	f	namespace:leveldb
AppendInternalKey	db/dbformat.cc	/^void AppendInternalKey(std::string* result, const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
AppendLocalTimeToBuffer	util/env_chromium.cc	/^  virtual int AppendLocalTimeToBuffer(char* buffer, size_t size) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
AppendNumberTo	util/logging.cc	/^void AppendNumberTo(std::string* str, uint64_t num) {$/;"	f	namespace:leveldb
Apply	db/version_set.cc	/^  void Apply(VersionEdit* edit) {$/;"	f	class:leveldb::VersionSet::Builder
ApproximateMemoryUsage	db/memtable.cc	/^size_t MemTable::ApproximateMemoryUsage() { return arena_.MemoryUsage(); }$/;"	f	class:leveldb::MemTable
ApproximateOffsetOf	db/version_set.cc	/^uint64_t VersionSet::ApproximateOffsetOf(Version* v, const InternalKey& ikey) {$/;"	f	class:leveldb::VersionSet
ApproximateOffsetOf	table/table.cc	/^uint64_t Table::ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::Table
ApproximateOffsetOf	table/table_test.cc	/^  uint64_t ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::TableConstructor
ArchiveFile	db/repair.cc	/^  void ArchiveFile(const std::string& fname) {$/;"	f	class:leveldb::__anon3::Repairer	file:
Arena	util/arena.cc	/^Arena::Arena() {$/;"	f	class:leveldb::Arena
Arena	util/arena.h	/^class Arena {$/;"	c	namespace:leveldb
ArenaTest	util/arena_test.cc	/^class ArenaTest { };$/;"	c	namespace:leveldb	file:
AssertHeld	port/port_android.h	/^  void AssertHeld() {$/;"	f	class:leveldb::port::Mutex
AssertHeld	port/port_chromium.cc	/^void Mutex::AssertHeld() {$/;"	f	class:leveldb::port::Mutex
AssertHeld	port/port_posix.h	/^  void AssertHeld() { }$/;"	f	class:leveldb::port::Mutex
AtomicPointer	port/port_android.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/port_android.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/port_android.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	port/port_chromium.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/port_chromium.h	/^  explicit AtomicPointer(void* p) : rep_(reinterpret_cast<Rep>(p)) {}$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/port_chromium.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	port/port_example.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/port_example.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	port/port_posix.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/port_posix.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	port/port_posix.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
Average	util/histogram.cc	/^double Histogram::Average() const {$/;"	f	class:leveldb::Histogram
BGItem	util/env_chromium.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	s	class:leveldb::__anon20::ChromiumEnv	file:
BGItem	util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	s	class:leveldb::__anon17::PosixEnv	file:
BGQueue	util/env_chromium.cc	/^  typedef std::deque<BGItem> BGQueue;$/;"	t	class:leveldb::__anon20::ChromiumEnv	file:
BGQueue	util/env_posix.cc	/^  typedef std::deque<BGItem> BGQueue;$/;"	t	class:leveldb::__anon17::PosixEnv	file:
BGThread	util/env_chromium.cc	/^void ChromiumEnv::BGThread() {$/;"	f	class:leveldb::__anon20::ChromiumEnv
BGThread	util/env_posix.cc	/^void PosixEnv::BGThread() {$/;"	f	class:leveldb::__anon17::PosixEnv
BGThreadWrapper	util/env_chromium.cc	/^  static void BGThreadWrapper(void* arg) {$/;"	f	class:leveldb::__anon20::ChromiumEnv	file:
BGThreadWrapper	util/env_posix.cc	/^  static void* BGThreadWrapper(void* arg) {$/;"	f	class:leveldb::__anon17::PosixEnv	file:
BGWork	db/db_impl.cc	/^void DBImpl::BGWork(void* db) {$/;"	f	class:leveldb::DBImpl
BINARY_OP	util/testharness.h	68;"	d
BINARY_OP	util/testharness.h	84;"	d
BLOCK_TEST	table/table_test.cc	/^  BLOCK_TEST,$/;"	e	enum:leveldb::TestType	file:
BackgroundCall	db/db_impl.cc	/^void DBImpl::BackgroundCall() {$/;"	f	class:leveldb::DBImpl
BackgroundCompaction	db/db_impl.cc	/^void DBImpl::BackgroundCompaction() {$/;"	f	class:leveldb::DBImpl
Benchmark	db/db_bench.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	db/db_bench.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Between	db/db_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
Between	table/table_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
BigString	db/log_test.cc	/^static std::string BigString(const std::string& partial_string, size_t n) {$/;"	f	namespace:leveldb::log
Block	table/block.cc	/^Block::Block(const char* data, size_t size)$/;"	f	class:leveldb::Block
Block	table/block.h	/^class Block {$/;"	c	namespace:leveldb
BlockBuilder	table/block_builder.cc	/^BlockBuilder::BlockBuilder(const Options* options)$/;"	f	class:leveldb::BlockBuilder
BlockBuilder	table/block_builder.h	/^class BlockBuilder {$/;"	c	namespace:leveldb
BlockConstructor	table/table_test.cc	/^  explicit BlockConstructor(const Comparator* cmp)$/;"	f	class:leveldb::BlockConstructor
BlockConstructor	table/table_test.cc	/^class BlockConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
BlockFunction	table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunction)(void*, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon8	file:
BlockHandle	table/format.h	/^class BlockHandle {$/;"	c	namespace:leveldb
BlockHandle	table/format.h	/^inline BlockHandle::BlockHandle()$/;"	f	class:leveldb::BlockHandle
BlockReader	table/table.cc	/^Iterator* Table::BlockReader(void* arg,$/;"	f	class:leveldb::Table
Build	db/corruption_test.cc	/^  void Build(int n) {$/;"	f	class:leveldb::CorruptionTest
BuildTable	db/builder.cc	/^Status BuildTable(const std::string& dbname,$/;"	f	namespace:leveldb
Builder	db/version_set.cc	/^  Builder(VersionSet* vset, Version* base)$/;"	f	class:leveldb::VersionSet::Builder
Builder	db/version_set.cc	/^class VersionSet::Builder {$/;"	c	class:leveldb::VersionSet	file:
BySmallestKey	db/version_set.cc	/^struct VersionSet::BySmallestKey {$/;"	s	class:leveldb::VersionSet	file:
ByteSize	db/write_batch_internal.h	/^  static size_t ByteSize(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
BytewiseComparator	util/comparator.cc	/^const Comparator* BytewiseComparator() {$/;"	f	namespace:leveldb
BytewiseComparatorImpl	util/comparator.cc	/^  BytewiseComparatorImpl() { }$/;"	f	class:leveldb::__anon15::BytewiseComparatorImpl
BytewiseComparatorImpl	util/comparator.cc	/^class BytewiseComparatorImpl : public Comparator {$/;"	c	namespace:leveldb::__anon15	file:
CC	Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS = -c -DLEVELDB_PLATFORM_POSIX -I. -I.\/include -std=c++0x $(OPT)$/;"	m
CRC	util/crc32c_test.cc	/^class CRC { };$/;"	c	namespace:leveldb::crc32c	file:
Cache	include/leveldb/cache.h	/^  Cache() { }$/;"	f	class:leveldb::Cache
Cache	include/leveldb/cache.h	/^class Cache {$/;"	c	namespace:leveldb
CacheTest	util/cache_test.cc	/^  CacheTest() : cache_(NewLRUCache(kCacheSize)) {$/;"	f	class:leveldb::CacheTest
CacheTest	util/cache_test.cc	/^class CacheTest {$/;"	c	namespace:leveldb	file:
Change	db/skiplist_test.cc	/^  void Change(ReaderState s) {$/;"	f	class:leveldb::TestState
ChangeOptions	table/table_builder.cc	/^Status TableBuilder::ChangeOptions(const Options& options) {$/;"	f	class:leveldb::TableBuilder
Check	db/corruption_test.cc	/^  void Check(int min_expected, int max_expected) {$/;"	f	class:leveldb::CorruptionTest
ChromiumEnv	util/env_chromium.cc	/^ChromiumEnv::ChromiumEnv()$/;"	f	class:leveldb::__anon20::ChromiumEnv
ChromiumEnv	util/env_chromium.cc	/^class ChromiumEnv : public Env {$/;"	c	namespace:leveldb::__anon20	file:
ChromiumFileLock	util/env_chromium.cc	/^class ChromiumFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon20	file:
ChromiumRandomAccessFile	util/env_chromium.cc	/^  ChromiumRandomAccessFile(const std::string& fname, ::base::PlatformFile file)$/;"	f	class:leveldb::__anon20::ChromiumRandomAccessFile
ChromiumRandomAccessFile	util/env_chromium.cc	/^class ChromiumRandomAccessFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon20	file:
ChromiumSequentialFile	util/env_chromium.cc	/^  ChromiumSequentialFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon20::ChromiumSequentialFile
ChromiumSequentialFile	util/env_chromium.cc	/^class ChromiumSequentialFile: public SequentialFile {$/;"	c	namespace:leveldb::__anon20	file:
ChromiumWritableFile	util/env_chromium.cc	/^  ChromiumWritableFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon20::ChromiumWritableFile
ChromiumWritableFile	util/env_chromium.cc	/^class ChromiumWritableFile : public WritableFile {$/;"	c	namespace:leveldb::__anon20	file:
Cleanup	include/leveldb/iterator.h	/^  struct Cleanup {$/;"	s	class:leveldb::Iterator
CleanupCompaction	db/db_impl.cc	/^void DBImpl::CleanupCompaction(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
CleanupFunction	include/leveldb/iterator.h	/^  typedef void (*CleanupFunction)(void* arg1, void* arg2);$/;"	t	class:leveldb::Iterator
Clear	db/dbformat.h	/^  void Clear() { rep_.clear(); }$/;"	f	class:leveldb::InternalKey
Clear	db/version_edit.cc	/^void VersionEdit::Clear() {$/;"	f	class:leveldb::VersionEdit
Clear	db/write_batch.cc	/^void WriteBatch::Clear() {$/;"	f	class:leveldb::WriteBatch
Clear	util/histogram.cc	/^void Histogram::Clear() {$/;"	f	class:leveldb::Histogram
ClearSavedValue	db/db_iter.cc	/^  inline void ClearSavedValue() {$/;"	f	class:leveldb::__anon5::DBIter	file:
ClipToRange	db/db_impl.cc	/^static void ClipToRange(T* ptr, V minvalue, V maxvalue) {$/;"	f	namespace:leveldb
Close	db/db_impl.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon1::NullWritableFile
Close	db/log_test.cc	/^    virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Close	table/table_test.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Close	util/env_chromium.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon20::ChromiumWritableFile
Close	util/env_posix.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon17::PosixMmapFile
Code	include/leveldb/status.h	/^  enum Code {$/;"	g	class:leveldb::Status
Coding	util/coding_test.cc	/^class Coding { };$/;"	c	namespace:leveldb	file:
Compact	db/db_bench.cc	/^  void Compact() {$/;"	f	class:leveldb::Benchmark	file:
Compact	db/db_test.cc	/^  void Compact(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
CompactMemTable	db/db_impl.cc	/^Status DBImpl::CompactMemTable() {$/;"	f	class:leveldb::DBImpl
CompactRange	db/version_set.cc	/^Compaction* VersionSet::CompactRange($/;"	f	class:leveldb::VersionSet
Compaction	db/version_set.cc	/^Compaction::Compaction(int level)$/;"	f	class:leveldb::Compaction
Compaction	db/version_set.h	/^class Compaction {$/;"	c	namespace:leveldb
CompactionState	db/db_impl.cc	/^  explicit CompactionState(Compaction* c)$/;"	f	struct:leveldb::DBImpl::CompactionState
CompactionState	db/db_impl.cc	/^struct DBImpl::CompactionState {$/;"	s	class:leveldb::DBImpl	file:
CompactionStats	db/db_impl.h	/^    CompactionStats() : micros(0), bytes_read(0), bytes_written(0) { }$/;"	f	struct:leveldb::DBImpl::CompactionStats
CompactionStats	db/db_impl.h	/^  struct CompactionStats {$/;"	s	class:leveldb::DBImpl
Comparator	db/skiplist_test.cc	/^struct Comparator {$/;"	s	namespace:leveldb	file:
Comparator	include/leveldb/comparator.h	/^class Comparator {$/;"	c	namespace:leveldb
Compare	db/dbformat.cc	/^int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {$/;"	f	class:leveldb::InternalKeyComparator
Compare	db/dbformat.h	/^inline int InternalKeyComparator::Compare($/;"	f	class:leveldb::InternalKeyComparator
Compare	table/block.cc	/^  inline int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::Block::Iter	file:
Compare	table/table_test.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon9::ReverseKeyComparator
Compare	util/comparator.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon15::BytewiseComparatorImpl
CompareIterators	db/db_test.cc	/^static bool CompareIterators(int step,$/;"	f	namespace:leveldb
CompressibleString	util/testutil.cc	/^extern Slice CompressibleString(Random* rnd, double compressed_fraction,$/;"	f	namespace:leveldb::test
CompressionType	include/leveldb/options.h	/^enum CompressionType {$/;"	g	namespace:leveldb
Computed	port/sha1_portable.cc	/^  bool Computed;               \/* Is the digest computed?          *\/$/;"	m	struct:leveldb::port::SHA1Context	file:
ConcurrentReader	db/skiplist_test.cc	/^static void ConcurrentReader(void* arg) {$/;"	f	namespace:leveldb
ConcurrentTest	db/skiplist_test.cc	/^  ConcurrentTest() : list_(Comparator(), &arena_) { }$/;"	f	class:leveldb::ConcurrentTest
ConcurrentTest	db/skiplist_test.cc	/^class ConcurrentTest {$/;"	c	namespace:leveldb	file:
CondVar	port/port_android.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	port/port_android.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	port/port_chromium.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	port/port_chromium.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	port/port_posix.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	port/port_posix.h	/^class CondVar {$/;"	c	namespace:leveldb::port
Constructor	table/table_test.cc	/^  explicit Constructor(const Comparator* cmp) : data_(STLLessThan(cmp)) { }$/;"	f	class:leveldb::Constructor
Constructor	table/table_test.cc	/^class Constructor {$/;"	c	namespace:leveldb	file:
ConsumeChar	util/logging.cc	/^bool ConsumeChar(Slice* in, char c) {$/;"	f	namespace:leveldb
ConsumeDecimalNumber	util/logging.cc	/^bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {$/;"	f	namespace:leveldb
Contains	db/skiplist.h	/^bool SkipList<Key,Comparator>::Contains(const Key& key) const {$/;"	f	class:leveldb::SkipList
Contents	db/write_batch_internal.h	/^  static Slice Contents(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ConvertLogFilesToTables	db/repair.cc	/^  void ConvertLogFilesToTables() {$/;"	f	class:leveldb::__anon3::Repairer	file:
ConvertLogToTable	db/repair.cc	/^  Status ConvertLogToTable(uint64_t log) {$/;"	f	class:leveldb::__anon3::Repairer	file:
Corrupt	db/corruption_test.cc	/^  void Corrupt(FileType filetype, int offset, int bytes_to_corrupt) {$/;"	f	class:leveldb::CorruptionTest
Corrupted	port/sha1_portable.cc	/^  bool Corrupted;              \/* Is the message digest corruped?  *\/$/;"	m	struct:leveldb::port::SHA1Context	file:
Corruption	db/log_test.cc	/^    virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::log::LogTest::ReportCollector
Corruption	include/leveldb/status.h	/^  static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
CorruptionError	table/block.cc	/^  void CorruptionError() {$/;"	f	class:leveldb::Block::Iter	file:
CorruptionTest	db/corruption_test.cc	/^  CorruptionTest() : rnd_(test::RandomSeed()) {$/;"	f	class:leveldb::CorruptionTest
CorruptionTest	db/corruption_test.cc	/^class CorruptionTest {$/;"	c	namespace:leveldb	file:
Count	db/write_batch.cc	/^int WriteBatchInternal::Count(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
Crc32c	db/db_bench.cc	/^  void Crc32c(int size, const char* label) {$/;"	f	class:leveldb::Benchmark	file:
CreateDir	include/leveldb/env.h	/^  Status CreateDir(const std::string& d) { return target_->CreateDir(d); }$/;"	f	class:leveldb::EnvWrapper
CreateDir	util/env_chromium.cc	/^  virtual Status CreateDir(const std::string& name) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
CreateDir	util/env_posix.cc	/^  virtual Status CreateDir(const std::string& name) {$/;"	f	class:leveldb::__anon17::PosixEnv
CreateFilePath	util/env_chromium.cc	/^::FilePath CreateFilePath(const std::string& file_path) {$/;"	f	namespace:leveldb::__anon20
CurrentFileName	db/filename.cc	/^std::string CurrentFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
CurrentSizeEstimate	table/block_builder.cc	/^size_t BlockBuilder::CurrentSizeEstimate() const {$/;"	f	class:leveldb::BlockBuilder
DB	include/leveldb/db.h	/^  DB() { }$/;"	f	class:leveldb::DB
DB	include/leveldb/db.h	/^class DB {$/;"	c	namespace:leveldb
DBConstructor	table/table_test.cc	/^  explicit DBConstructor(const Comparator* cmp)$/;"	f	class:leveldb::DBConstructor
DBConstructor	table/table_test.cc	/^class DBConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
DBImpl	db/db_impl.cc	/^DBImpl::DBImpl(const Options& options, const std::string& dbname)$/;"	f	class:leveldb::DBImpl
DBImpl	db/db_impl.h	/^class DBImpl : public DB {$/;"	c	namespace:leveldb
DBIter	db/db_iter.cc	/^  DBIter(const std::string* dbname, Env* env,$/;"	f	class:leveldb::__anon5::DBIter
DBIter	db/db_iter.cc	/^class DBIter: public Iterator {$/;"	c	namespace:leveldb::__anon5	file:
DBState	db/db_bench.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBTest	db/db_test.cc	/^  DBTest() : env_(Env::Default()) {$/;"	f	class:leveldb::DBTest
DBTest	db/db_test.cc	/^class DBTest {$/;"	c	namespace:leveldb	file:
DB_TEST	table/table_test.cc	/^  DB_TEST,$/;"	e	enum:leveldb::TestType	file:
DONE	db/skiplist_test.cc	/^    DONE$/;"	e	enum:leveldb::TestState::ReaderState	file:
DebugString	db/dbformat.cc	/^std::string ParsedInternalKey::DebugString() const {$/;"	f	class:leveldb::ParsedInternalKey
DebugString	db/version_edit.cc	/^std::string VersionEdit::DebugString() const {$/;"	f	class:leveldb::VersionEdit
DebugString	db/version_set.cc	/^std::string Version::DebugString() const {$/;"	f	class:leveldb::Version
DecodeEntry	table/block.cc	/^static inline const char* DecodeEntry(const char* p, const char* limit,$/;"	f	namespace:leveldb
DecodeFixed32	util/coding.h	/^inline uint32_t DecodeFixed32(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFixed64	util/coding.h	/^inline uint64_t DecodeFixed64(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFrom	db/dbformat.h	/^  void DecodeFrom(const Slice& s) { rep_.assign(s.data(), s.size()); }$/;"	f	class:leveldb::InternalKey
DecodeFrom	db/version_edit.cc	/^Status VersionEdit::DecodeFrom(const Slice& src) {$/;"	f	class:leveldb::VersionEdit
DecodeFrom	table/format.cc	/^Status BlockHandle::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::BlockHandle
DecodeFrom	table/format.cc	/^Status Footer::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::Footer
DecodeKey	util/cache_test.cc	/^static int DecodeKey(const Slice& k) {$/;"	f	namespace:leveldb
DecodeValue	util/cache_test.cc	/^static int DecodeValue(void* v) { return reinterpret_cast<uintptr_t>(v); }$/;"	f	namespace:leveldb
Default	util/env_chromium.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Default	util/env_posix.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Delete	db/db_impl.cc	/^Status DB::Delete(const WriteOptions& opt, const Slice& key) {$/;"	f	class:leveldb::DB
Delete	db/db_impl.cc	/^Status DBImpl::Delete(const WriteOptions& options, const Slice& key) {$/;"	f	class:leveldb::DBImpl
Delete	db/db_test.cc	/^  Status Delete(const std::string& k) {$/;"	f	class:leveldb::DBTest
Delete	db/db_test.cc	/^  virtual Status Delete(const WriteOptions& o, const Slice& key) {$/;"	f	class:leveldb::ModelDB
Delete	db/snapshot.h	/^  void Delete(const Snapshot* s) {$/;"	f	class:leveldb::SnapshotList
Delete	db/write_batch.cc	/^void WriteBatch::Delete(const Slice& key) {$/;"	f	class:leveldb::WriteBatch
DeleteBlock	table/table.cc	/^static void DeleteBlock(void* arg, void* ignored) {$/;"	f	namespace:leveldb
DeleteCachedBlock	table/table.cc	/^static void DeleteCachedBlock(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteDir	include/leveldb/env.h	/^  Status DeleteDir(const std::string& d) { return target_->DeleteDir(d); }$/;"	f	class:leveldb::EnvWrapper
DeleteDir	util/env_chromium.cc	/^  virtual Status DeleteDir(const std::string& name) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
DeleteDir	util/env_posix.cc	/^  virtual Status DeleteDir(const std::string& name) {$/;"	f	class:leveldb::__anon17::PosixEnv
DeleteEntry	db/table_cache.cc	/^static void DeleteEntry(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteFile	db/version_edit.h	/^  void DeleteFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteFile	include/leveldb/env.h	/^  Status DeleteFile(const std::string& f) { return target_->DeleteFile(f); }$/;"	f	class:leveldb::EnvWrapper
DeleteFile	util/env_chromium.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
DeleteFile	util/env_posix.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon17::PosixEnv
DeleteObsoleteFiles	db/db_impl.cc	/^void DBImpl::DeleteObsoleteFiles() {$/;"	f	class:leveldb::DBImpl
DeletedFileSet	db/version_edit.h	/^  typedef std::set< std::pair<int, uint64_t> > DeletedFileSet;$/;"	t	class:leveldb::VersionEdit
Deleter	util/cache_test.cc	/^  static void Deleter(const Slice& key, void* v) {$/;"	f	class:leveldb::CacheTest
DescriptorFileName	db/filename.cc	/^std::string DescriptorFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
DestroyAndReopen	db/db_test.cc	/^  void DestroyAndReopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
DestroyDB	db/db_impl.cc	/^Status DestroyDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
Direction	db/db_iter.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon5::DBIter	file:
Direction	table/merger.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon14::MergingIterator	file:
DoCompactionWork	db/db_impl.cc	/^Status DBImpl::DoCompactionWork(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
Done	db/write_batch_internal.h	/^    bool Done() const { return done_; }$/;"	f	class:leveldb::WriteBatchInternal::Iterator
DroppedBytes	db/log_test.cc	/^  size_t DroppedBytes() const {$/;"	f	class:leveldb::log::LogTest
DumpFileCounts	db/db_test.cc	/^  void DumpFileCounts(const char* label) {$/;"	f	class:leveldb::DBTest
EXISTING	db/db_bench.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EmitPhysicalRecord	db/log_writer.cc	/^Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr, size_t n) {$/;"	f	class:leveldb::log::Writer
EmptyIterator	table/iterator.cc	/^  EmptyIterator(const Status& s) : status_(s) { }$/;"	f	class:leveldb::__anon13::EmptyIterator
EmptyIterator	table/iterator.cc	/^class EmptyIterator : public Iterator {$/;"	c	namespace:leveldb::__anon13	file:
Encode	db/dbformat.h	/^  Slice Encode() const {$/;"	f	class:leveldb::InternalKey
EncodeFixed32	util/coding.cc	/^void EncodeFixed32(char* buf, uint32_t value) {$/;"	f	namespace:leveldb
EncodeFixed64	util/coding.cc	/^void EncodeFixed64(char* buf, uint64_t value) {$/;"	f	namespace:leveldb
EncodeKey	db/memtable.cc	/^static const char* EncodeKey(std::string* scratch, const Slice& target) {$/;"	f	namespace:leveldb
EncodeKey	util/cache_test.cc	/^static std::string EncodeKey(int k) {$/;"	f	namespace:leveldb
EncodeTo	db/version_edit.cc	/^void VersionEdit::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::VersionEdit
EncodeTo	table/format.cc	/^void BlockHandle::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::BlockHandle
EncodeTo	table/format.cc	/^void Footer::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::Footer
EncodeValue	util/cache_test.cc	/^static void* EncodeValue(uintptr_t v) { return reinterpret_cast<void*>(v); }$/;"	f	namespace:leveldb
EncodeVarint32	util/coding.cc	/^char* EncodeVarint32(char* dst, uint32_t v) {$/;"	f	namespace:leveldb
EncodeVarint64	util/coding.cc	/^char* EncodeVarint64(char* dst, uint64_t v) {$/;"	f	namespace:leveldb
Env	include/leveldb/env.h	/^  Env() { }$/;"	f	class:leveldb::Env
Env	include/leveldb/env.h	/^class Env {$/;"	c	namespace:leveldb
EnvPosixTest	util/env_test.cc	/^  EnvPosixTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvPosixTest
EnvPosixTest	util/env_test.cc	/^class EnvPosixTest {$/;"	c	namespace:leveldb	file:
EnvWrapper	include/leveldb/env.h	/^  explicit EnvWrapper(Env* target) : target_(target) { }$/;"	f	class:leveldb::EnvWrapper
EnvWrapper	include/leveldb/env.h	/^class EnvWrapper : public Env {$/;"	c	namespace:leveldb
Equal	db/skiplist.h	/^  bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }$/;"	f	class:leveldb::SkipList
Erase	util/cache.cc	/^void LRUCache::Erase(const Slice& key) {$/;"	f	class:leveldb::__anon22::LRUCache
Erase	util/cache_test.cc	/^  void Erase(int key) {$/;"	f	class:leveldb::CacheTest
ErrorEnv	util/testutil.h	/^  ErrorEnv() : EnvWrapper(Env::Default()),$/;"	f	class:leveldb::test::ErrorEnv
ErrorEnv	util/testutil.h	/^class ErrorEnv : public EnvWrapper {$/;"	c	namespace:leveldb::test
EscapeString	util/logging.cc	/^std::string EscapeString(const Slice& value) {$/;"	f	namespace:leveldb
Evict	db/table_cache.cc	/^void TableCache::Evict(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
Extend	util/crc32c.cc	/^uint32_t Extend(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::crc32c
ExtractMetaData	db/repair.cc	/^  void ExtractMetaData() {$/;"	f	class:leveldb::__anon3::Repairer	file:
ExtractUserKey	db/dbformat.h	/^inline Slice ExtractUserKey(const Slice& internal_key) {$/;"	f	namespace:leveldb
ExtractValueType	db/dbformat.h	/^inline ValueType ExtractValueType(const Slice& internal_key) {$/;"	f	namespace:leveldb
FLAGS_benchmarks	db/db_bench.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_cache_size	db/db_bench.cc	/^static int FLAGS_cache_size = -1;$/;"	v	file:
FLAGS_compression_ratio	db/db_bench.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_histogram	db/db_bench.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_num	db/db_bench.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_value_size	db/db_bench.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_write_buffer_size	db/db_bench.cc	/^static int FLAGS_write_buffer_size = 0;$/;"	v	file:
FRESH	db/db_bench.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FileExists	include/leveldb/env.h	/^  bool FileExists(const std::string& f) { return target_->FileExists(f); }$/;"	f	class:leveldb::EnvWrapper
FileExists	util/env_chromium.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
FileExists	util/env_posix.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon17::PosixEnv
FileLock	include/leveldb/env.h	/^  FileLock() { }$/;"	f	class:leveldb::FileLock
FileLock	include/leveldb/env.h	/^class FileLock {$/;"	c	namespace:leveldb
FileMap	db/version_set.cc	/^  typedef std::map<uint64_t, FileMetaData*> FileMap;$/;"	t	class:leveldb::VersionSet::Builder	file:
FileMetaData	db/version_edit.h	/^  FileMetaData() : refs(0), file_size(0) { }$/;"	f	struct:leveldb::FileMetaData
FileMetaData	db/version_edit.h	/^struct FileMetaData {$/;"	s	namespace:leveldb
FileNameTest	db/filename_test.cc	/^class FileNameTest { };$/;"	c	namespace:leveldb	file:
FilePathToString	util/env_chromium.cc	/^std::string FilePathToString(const ::FilePath& file_path) {$/;"	f	namespace:leveldb::__anon20
FileSize	table/table_builder.cc	/^uint64_t TableBuilder::FileSize() const {$/;"	f	class:leveldb::TableBuilder
FileType	db/filename.h	/^enum FileType {$/;"	g	namespace:leveldb
Finalize	db/version_set.cc	/^Status VersionSet::Finalize(Version* v) {$/;"	f	class:leveldb::VersionSet
FindFiles	db/repair.cc	/^  Status FindFiles() {$/;"	f	class:leveldb::__anon3::Repairer	file:
FindGreaterOrEqual	db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindGreaterOrEqual(const Key& key, Node** prev)$/;"	f	class:leveldb::SkipList
FindLargest	table/merger.cc	/^void MergingIterator::FindLargest() {$/;"	f	class:leveldb::__anon14::MergingIterator
FindLast	db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindLast()$/;"	f	class:leveldb::SkipList
FindLessThan	db/skiplist.h	/^SkipList<Key,Comparator>::FindLessThan(const Key& key) const {$/;"	f	class:leveldb::SkipList
FindNextUserEntry	db/db_iter.cc	/^void DBIter::FindNextUserEntry(bool skipping, std::string* skip) {$/;"	f	class:leveldb::__anon5::DBIter
FindPrevUserEntry	db/db_iter.cc	/^void DBIter::FindPrevUserEntry() {$/;"	f	class:leveldb::__anon5::DBIter
FindShortSuccessor	db/dbformat.cc	/^void InternalKeyComparator::FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::InternalKeyComparator
FindShortSuccessor	table/table_test.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon9::ReverseKeyComparator
FindShortSuccessor	util/comparator.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon15::BytewiseComparatorImpl
FindShortestSeparator	db/dbformat.cc	/^void InternalKeyComparator::FindShortestSeparator($/;"	f	class:leveldb::InternalKeyComparator
FindShortestSeparator	table/table_test.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon9::ReverseKeyComparator
FindShortestSeparator	util/comparator.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon15::BytewiseComparatorImpl
FindSmallest	table/merger.cc	/^void MergingIterator::FindSmallest() {$/;"	f	class:leveldb::__anon14::MergingIterator
Finish	table/block_builder.cc	/^Slice BlockBuilder::Finish() {$/;"	f	class:leveldb::BlockBuilder
Finish	table/table_builder.cc	/^Status TableBuilder::Finish() {$/;"	f	class:leveldb::TableBuilder
Finish	table/table_test.cc	/^  void Finish(const Options& options,$/;"	f	class:leveldb::Constructor
FinishCompactionOutputFile	db/db_impl.cc	/^Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
FinishImpl	table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::BlockConstructor
FinishImpl	table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::DBConstructor
FinishImpl	table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::MemTableConstructor
FinishImpl	table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::TableConstructor
FinishedSingleOp	db/db_bench.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FixChecksum	db/log_test.cc	/^  void FixChecksum(int header_offset, int len) {$/;"	f	class:leveldb::log::LogTest
Flush	db/db_impl.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon1::NullWritableFile
Flush	db/log_test.cc	/^    virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Flush	table/table_builder.cc	/^void TableBuilder::Flush() {$/;"	f	class:leveldb::TableBuilder
Flush	table/table_test.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Flush	util/env_chromium.cc	/^  virtual Status Flush() {$/;"	f	class:leveldb::__anon20::ChromiumWritableFile
Flush	util/env_posix.cc	/^  virtual Status Flush() {$/;"	f	class:leveldb::__anon17::PosixMmapFile
Footer	table/format.h	/^  Footer() { }$/;"	f	class:leveldb::Footer
Footer	table/format.h	/^class Footer {$/;"	c	namespace:leveldb
ForceError	db/log_test.cc	/^  void ForceError() {$/;"	f	class:leveldb::log::LogTest
FormatTest	db/dbformat_test.cc	/^class FormatTest { };$/;"	c	namespace:leveldb	file:
Generate	db/db_bench.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon7::RandomGenerator
Get	db/db_impl.cc	/^Status DBImpl::Get(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
Get	db/db_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::DBTest
Get	db/db_test.cc	/^  virtual Status Get(const ReadOptions& options,$/;"	f	class:leveldb::ModelDB
Get	db/skiplist_test.cc	/^    intptr_t Get(int k) {$/;"	f	struct:leveldb::ConcurrentTest::State
GetApproximateSizes	db/db_impl.cc	/^void DBImpl::GetApproximateSizes($/;"	f	class:leveldb::DBImpl
GetApproximateSizes	db/db_test.cc	/^  virtual void GetApproximateSizes(const Range* r, int n, uint64_t* sizes) {$/;"	f	class:leveldb::ModelDB
GetChildren	include/leveldb/env.h	/^  Status GetChildren(const std::string& dir, std::vector<std::string>* r) {$/;"	f	class:leveldb::EnvWrapper
GetChildren	util/env_chromium.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon20::ChromiumEnv
GetChildren	util/env_posix.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon17::PosixEnv
GetFileIterator	db/version_set.cc	/^static Iterator* GetFileIterator(void* arg,$/;"	f	namespace:leveldb
GetFileSize	include/leveldb/env.h	/^  Status GetFileSize(const std::string& f, uint64_t* s) {$/;"	f	class:leveldb::EnvWrapper
GetFileSize	util/env_chromium.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* size) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
GetFileSize	util/env_posix.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* size) {$/;"	f	class:leveldb::__anon17::PosixEnv
GetHeapProfile	port/port_android.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeapProfile	port/port_chromium.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeapProfile	port/port_posix.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetInternalKey	db/version_edit.cc	/^static bool GetInternalKey(Slice* input, InternalKey* dst) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	db/memtable.cc	/^static Slice GetLengthPrefixedSlice(const char* data) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	util/coding.cc	/^bool GetLengthPrefixedSlice(Slice* input, Slice* result) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	util/coding.cc	/^const char* GetLengthPrefixedSlice(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetLevel	db/version_edit.cc	/^static bool GetLevel(Slice* input, int* level) {$/;"	f	namespace:leveldb
GetMaxHeight	db/skiplist.h	/^  inline int GetMaxHeight() const {$/;"	f	class:leveldb::SkipList
GetNextEntry	db/write_batch.cc	/^void WriteBatchInternal::Iterator::GetNextEntry() {$/;"	f	class:leveldb::WriteBatchInternal::Iterator
GetOverlappingInputs	db/version_set.cc	/^void VersionSet::GetOverlappingInputs($/;"	f	class:leveldb::VersionSet
GetProperty	db/db_impl.cc	/^bool DBImpl::GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::DBImpl
GetProperty	db/db_test.cc	/^  virtual bool GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::ModelDB
GetRange	db/version_set.cc	/^void VersionSet::GetRange(const std::vector<FileMetaData*>& inputs,$/;"	f	class:leveldb::VersionSet
GetRange2	db/version_set.cc	/^void VersionSet::GetRange2(const std::vector<FileMetaData*>& inputs1,$/;"	f	class:leveldb::VersionSet
GetRestartPoint	table/block.cc	/^  uint32_t GetRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
GetSnapshot	db/db_impl.cc	/^const Snapshot* DBImpl::GetSnapshot() {$/;"	f	class:leveldb::DBImpl
GetSnapshot	db/db_test.cc	/^  virtual const Snapshot* GetSnapshot() {$/;"	f	class:leveldb::ModelDB
GetTestDirectory	include/leveldb/env.h	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::EnvWrapper
GetTestDirectory	util/env_chromium.cc	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
GetTestDirectory	util/env_posix.cc	/^  virtual Status GetTestDirectory(std::string* result) {$/;"	f	class:leveldb::__anon17::PosixEnv
GetVarint32	util/coding.cc	/^bool GetVarint32(Slice* input, uint32_t* value) {$/;"	f	namespace:leveldb
GetVarint32Ptr	util/coding.h	/^inline const char* GetVarint32Ptr(const char* p,$/;"	f	namespace:leveldb
GetVarint32PtrFallback	util/coding.cc	/^const char* GetVarint32PtrFallback(const char* p,$/;"	f	namespace:leveldb
GetVarint64	util/coding.cc	/^bool GetVarint64(Slice* input, uint64_t* value) {$/;"	f	namespace:leveldb
GetVarint64Ptr	util/coding.cc	/^const char* GetVarint64Ptr(const char* p, const char* limit, uint64_t* value) {$/;"	f	namespace:leveldb
Handle	include/leveldb/cache.h	/^  struct Handle { };$/;"	s	class:leveldb::Cache
HandleEq	util/cache.cc	/^  struct HandleEq {$/;"	s	namespace:leveldb::__anon22	file:
HandleHash	util/cache.cc	/^  struct HandleHash {$/;"	s	namespace:leveldb::__anon22	file:
HandleHashCompare	util/cache.cc	/^  struct HandleHashCompare : public stdext::hash_compare<LRUHandle*> {$/;"	s	namespace:leveldb::__anon22	file:
HandleTable	util/cache.cc	/^    typedef __gnu_cxx::hash_set<LRUHandle*, HandleHash, HandleEq> HandleTable;$/;"	t	namespace:leveldb::__anon22	file:
HandleTable	util/cache.cc	/^    typedef base::hash_set<LRUHandle*, HandleHash, HandleEq> HandleTable;$/;"	t	namespace:leveldb::__anon22	file:
HandleTable	util/cache.cc	/^    typedef std::unordered_set<LRUHandle*, HandleHash, HandleEq> HandleTable;$/;"	t	namespace:leveldb::__anon22	file:
HandleTable	util/cache.cc	/^  typedef base::hash_set<LRUHandle*, HandleHashCompare> HandleTable;$/;"	t	namespace:leveldb::__anon22	file:
Harness	table/table_test.cc	/^  Harness() : constructor_(NULL) { }$/;"	f	class:leveldb::Harness
Harness	table/table_test.cc	/^class Harness {$/;"	c	namespace:leveldb	file:
Hash	util/hash.cc	/^uint32_t Hash(const char* data, size_t n, uint32_t seed) {$/;"	f	namespace:leveldb
HashNumbers	db/skiplist_test.cc	/^  static uint64_t HashNumbers(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
HeapProfile	db/db_bench.cc	/^  void HeapProfile() {$/;"	f	class:leveldb::Benchmark	file:
Histogram	util/histogram.h	/^  Histogram() { }$/;"	f	class:leveldb::Histogram
Histogram	util/histogram.h	/^class Histogram {$/;"	c	namespace:leveldb
IKey	db/dbformat_test.cc	/^static std::string IKey(const std::string& user_key,$/;"	f	namespace:leveldb
IOError	include/leveldb/status.h	/^  static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Increment	table/table_test.cc	/^static void Increment(const Comparator* cmp, std::string* key) {$/;"	f	namespace:leveldb
IncrementByte	db/log_test.cc	/^  void IncrementByte(int offset, int delta) {$/;"	f	class:leveldb::log::LogTest
InfoLogFileName	db/filename.cc	/^std::string InfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
Init	table/table_test.cc	/^  void Init(const TestArgs& args) {$/;"	f	class:leveldb::Harness
InitDataBlock	table/two_level_iterator.cc	/^void TwoLevelIterator::InitDataBlock() {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
InitDefaultEnv	util/env_posix.cc	/^static void InitDefaultEnv() { default_env = new PosixEnv; }$/;"	f	namespace:leveldb
Insert	db/skiplist.h	/^void SkipList<Key,Comparator>::Insert(const Key& key) {$/;"	f	class:leveldb::SkipList
Insert	util/cache.cc	/^Cache::Handle* LRUCache::Insert(const Slice& key, void* value, size_t charge,$/;"	f	class:leveldb::__anon22::LRUCache
Insert	util/cache_test.cc	/^  void Insert(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
InsertInto	db/write_batch.cc	/^Status WriteBatchInternal::InsertInto(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
InstallCompactionResults	db/db_impl.cc	/^Status DBImpl::InstallCompactionResults(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
IntSetToString	db/version_set.cc	/^std::string IntSetToString(const std::set<uint64_t>& s) {$/;"	f	namespace:leveldb::__anon4
InternalKey	db/dbformat.h	/^  InternalKey() { }   \/\/ Leave rep_ as empty to indicate it is invalid$/;"	f	class:leveldb::InternalKey
InternalKey	db/dbformat.h	/^  InternalKey(const Slice& user_key, SequenceNumber s, ValueType t) {$/;"	f	class:leveldb::InternalKey
InternalKey	db/dbformat.h	/^class InternalKey {$/;"	c	namespace:leveldb
InternalKeyComparator	db/dbformat.h	/^  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) { }$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	db/dbformat.h	/^class InternalKeyComparator : public Comparator {$/;"	c	namespace:leveldb
InternalKeyEncodingLength	db/dbformat.h	/^inline size_t InternalKeyEncodingLength(const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
InvalidArgument	include/leveldb/status.h	/^  static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Is	util/testharness.h	/^  Tester& Is(bool b, const char* msg) {$/;"	f	class:leveldb::test::Tester
IsBaseLevelForKey	db/version_set.cc	/^bool Compaction::IsBaseLevelForKey(const Slice& user_key) {$/;"	f	class:leveldb::Compaction
IsNotFound	include/leveldb/status.h	/^  bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:leveldb::Status
IsOk	util/testharness.h	/^  Tester& IsOk(const Status& s) {$/;"	f	class:leveldb::test::Tester
IsTrivialMove	db/version_set.cc	/^bool Compaction::IsTrivialMove() const {$/;"	f	class:leveldb::Compaction
IsValidKey	db/skiplist_test.cc	/^  static bool IsValidKey(Key k) {$/;"	f	class:leveldb::ConcurrentTest	file:
Iter	table/block.cc	/^  Iter(const Comparator* comparator,$/;"	f	class:leveldb::Block::Iter
Iter	table/block.cc	/^class Block::Iter : public Iterator {$/;"	c	class:leveldb::Block	file:
IterStatus	db/db_test.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::DBTest
Iterator	db/skiplist.h	/^  class Iterator {$/;"	c	class:leveldb::SkipList
Iterator	db/skiplist.h	/^inline SkipList<Key,Comparator>::Iterator::Iterator(const SkipList* list) {$/;"	f	class:leveldb::SkipList::Iterator
Iterator	db/write_batch.cc	/^WriteBatchInternal::Iterator::Iterator(const WriteBatch& batch)$/;"	f	class:leveldb::WriteBatchInternal::Iterator
Iterator	db/write_batch_internal.h	/^  class Iterator {$/;"	c	class:leveldb::WriteBatchInternal
Iterator	include/leveldb/iterator.h	/^class Iterator {$/;"	c	namespace:leveldb
Iterator	table/iterator.cc	/^Iterator::Iterator() {$/;"	f	class:leveldb::Iterator
IteratorWrapper	table/iterator_wrapper.h	/^  IteratorWrapper(): iter_(NULL), valid_(false) { }$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	table/iterator_wrapper.h	/^  explicit IteratorWrapper(Iterator* iter): iter_(NULL) {$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	table/iterator_wrapper.h	/^class IteratorWrapper {$/;"	c	namespace:leveldb
K	db/skiplist_test.cc	/^  static const uint32_t K = 4;$/;"	m	class:leveldb::ConcurrentTest	file:
K	db/skiplist_test.cc	/^const uint32_t ConcurrentTest::K;$/;"	m	class:leveldb::ConcurrentTest	file:
KVMap	db/db_test.cc	/^  typedef std::map<std::string, std::string> KVMap;$/;"	t	class:leveldb::ModelDB	file:
KVMap	table/table_test.cc	/^typedef std::map<std::string, std::string, STLLessThan> KVMap;$/;"	t	namespace:leveldb	file:
Key	db/corruption_test.cc	/^  Slice Key(int i, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Key	db/db_test.cc	/^static std::string Key(int i) {$/;"	f	namespace:leveldb
Key	db/skiplist_test.cc	/^typedef uint64_t Key;$/;"	t	namespace:leveldb	file:
KeyComparator	db/memtable.h	/^    explicit KeyComparator(const InternalKeyComparator& c) : comparator(c) { }$/;"	f	struct:leveldb::MemTable::KeyComparator
KeyComparator	db/memtable.h	/^  struct KeyComparator {$/;"	s	class:leveldb::MemTable
KeyConvertingIterator	table/table_test.cc	/^  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) { }$/;"	f	class:leveldb::KeyConvertingIterator
KeyConvertingIterator	table/table_test.cc	/^class KeyConvertingIterator: public Iterator {$/;"	c	namespace:leveldb	file:
KeyIsAfterNode	db/skiplist.h	/^bool SkipList<Key,Comparator>::KeyIsAfterNode(const Key& key, Node* n) const {$/;"	f	class:leveldb::SkipList
LDFLAGS	Makefile	/^LDFLAGS=-lpthread$/;"	m
LE_LOAD32	util/crc32c.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::crc32c
LIBOBJECTS	Makefile	/^LIBOBJECTS = \\$/;"	m
LRUCache	util/cache.cc	/^LRUCache::LRUCache(size_t capacity)$/;"	f	class:leveldb::__anon22::LRUCache
LRUCache	util/cache.cc	/^class LRUCache : public Cache {$/;"	c	namespace:leveldb::__anon22	file:
LRUHandle	util/cache.cc	/^struct LRUHandle {$/;"	s	namespace:leveldb::__anon22	file:
LRU_Append	util/cache.cc	/^void LRUCache::LRU_Append(LRUHandle* e) {$/;"	f	class:leveldb::__anon22::LRUCache
LRU_Remove	util/cache.cc	/^void LRUCache::LRU_Remove(LRUHandle* e) {$/;"	f	class:leveldb::__anon22::LRUCache
LastSequence	db/version_set.h	/^  uint64_t LastSequence() const { return last_sequence_; }$/;"	f	class:leveldb::VersionSet
Length_High	port/sha1_portable.cc	/^  unsigned Length_High;       \/* Message length in bits           *\/$/;"	m	struct:leveldb::port::SHA1Context	file:
Length_Low	port/sha1_portable.cc	/^  unsigned Length_Low;        \/* Message length in bits           *\/$/;"	m	struct:leveldb::port::SHA1Context	file:
LevelFileNumIterator	db/version_set.cc	/^  LevelFileNumIterator(const Version* version,$/;"	f	class:leveldb::Version::LevelFileNumIterator
LevelFileNumIterator	db/version_set.cc	/^class Version::LevelFileNumIterator : public Iterator {$/;"	c	class:leveldb::Version	file:
LinuxKernelMemoryBarrierFunc	port/port_android.h	/^typedef void (*LinuxKernelMemoryBarrierFunc)(void);$/;"	t	namespace:leveldb::port
Lock	port/port_android.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Lock	port/port_chromium.cc	/^void Mutex::Lock() {$/;"	f	class:leveldb::port::Mutex
Lock	port/port_posix.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
LockFile	include/leveldb/env.h	/^  Status LockFile(const std::string& f, FileLock** l) {$/;"	f	class:leveldb::EnvWrapper
LockFile	util/env_chromium.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
LockFile	util/env_posix.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon17::PosixEnv
LockFileName	db/filename.cc	/^std::string LockFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
LockOrUnlock	util/env_posix.cc	/^static int LockOrUnlock(int fd, bool lock) {$/;"	f	namespace:leveldb::__anon17
Log	util/env.cc	/^void Log(Env* env, WritableFile* info_log, const char* format, ...) {$/;"	f	namespace:leveldb
LogAndApply	db/version_set.cc	/^Status VersionSet::LogAndApply(VersionEdit* edit, MemTable* cleanup_mem) {$/;"	f	class:leveldb::VersionSet
LogFileName	db/filename.cc	/^std::string LogFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
LogNumber	db/version_set.h	/^  uint64_t LogNumber() const { return log_number_; }$/;"	f	class:leveldb::VersionSet
LogTest	db/log_test.cc	/^  LogTest() : reading_(false),$/;"	f	class:leveldb::log::LogTest
LogTest	db/log_test.cc	/^class LogTest {$/;"	c	namespace:leveldb::log	file:
Logv	include/leveldb/env.h	/^  virtual void Logv(WritableFile* log, const char* format, va_list ap) {$/;"	f	class:leveldb::EnvWrapper
Logv	util/env_chromium.cc	/^  virtual void Logv(WritableFile* info_log, const char* format, va_list ap) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
Logv	util/env_posix.cc	/^  virtual void Logv(WritableFile* info_log, const char* format, va_list ap) {$/;"	f	class:leveldb::__anon17::PosixEnv
Lookup	util/cache.cc	/^Cache::Handle* LRUCache::Lookup(const Slice& key) {$/;"	f	class:leveldb::__anon22::LRUCache
Lookup	util/cache_test.cc	/^  int Lookup(int key) {$/;"	f	class:leveldb::CacheTest
MEMTABLE_TEST	table/table_test.cc	/^  MEMTABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
MakeFileName	db/filename.cc	/^static std::string MakeFileName(const std::string& name, uint64_t number,$/;"	f	namespace:leveldb
MakeInputIterator	db/version_set.cc	/^Iterator* VersionSet::MakeInputIterator(Compaction* c) {$/;"	f	class:leveldb::VersionSet
MakeKey	db/skiplist_test.cc	/^  static Key MakeKey(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
MakeRoomForWrite	db/db_impl.cc	/^Status DBImpl::MakeRoomForWrite(bool force) {$/;"	f	class:leveldb::DBImpl
ManifestFileNumber	db/version_set.h	/^  uint64_t ManifestFileNumber() const { return manifest_file_number_; }$/;"	f	class:leveldb::VersionSet
MapNewRegion	util/env_posix.cc	/^  bool MapNewRegion() {$/;"	f	class:leveldb::__anon17::PosixMmapFile	file:
Mask	util/crc32c.h	/^inline uint32_t Mask(uint32_t crc) {$/;"	f	namespace:leveldb::crc32c
MatchError	db/log_test.cc	/^  std::string MatchError(const std::string& msg) const {$/;"	f	class:leveldb::log::LogTest
MaxBytesForLevel	db/version_set.cc	/^static double MaxBytesForLevel(int level) {$/;"	f	namespace:leveldb
MaxFileSizeForLevel	db/version_set.cc	/^static uint64_t MaxFileSizeForLevel(int level) {$/;"	f	namespace:leveldb
MaxNextLevelOverlappingBytes	db/version_set.cc	/^int64_t VersionSet::MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::VersionSet
MaxOutputFileSize	db/version_set.h	/^  uint64_t MaxOutputFileSize() const { return max_output_file_size_; }$/;"	f	class:leveldb::Compaction
MaybeDeleteOldVersions	db/version_set.cc	/^void VersionSet::MaybeDeleteOldVersions() {$/;"	f	class:leveldb::VersionSet
MaybeIgnoreError	db/db_impl.cc	/^void DBImpl::MaybeIgnoreError(Status* s) const {$/;"	f	class:leveldb::DBImpl
MaybeScheduleCompaction	db/db_impl.cc	/^void DBImpl::MaybeScheduleCompaction() {$/;"	f	class:leveldb::DBImpl
Median	util/histogram.cc	/^double Histogram::Median() const {$/;"	f	class:leveldb::Histogram
MemTable	db/memtable.cc	/^MemTable::MemTable(const InternalKeyComparator& cmp)$/;"	f	class:leveldb::MemTable
MemTable	db/memtable.h	/^class MemTable {$/;"	c	namespace:leveldb
MemTableConstructor	table/table_test.cc	/^  explicit MemTableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::MemTableConstructor
MemTableConstructor	table/table_test.cc	/^class MemTableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
MemTableIterator	db/memtable.cc	/^  explicit MemTableIterator(MemTable::Table* table) {$/;"	f	class:leveldb::MemTableIterator
MemTableIterator	db/memtable.cc	/^class MemTableIterator: public Iterator {$/;"	c	namespace:leveldb	file:
MemTableTest	table/table_test.cc	/^class MemTableTest { };$/;"	c	namespace:leveldb	file:
MemoryBarrier	port/port_android.h	/^  inline void MemoryBarrier() const {$/;"	f	class:leveldb::port::AtomicPointer
MemoryUsage	util/arena.h	/^  size_t MemoryUsage() const {$/;"	f	class:leveldb::Arena
MergingIterator	table/merger.cc	/^  MergingIterator(const Comparator* comparator, Iterator** children, int n)$/;"	f	class:leveldb::__anon14::MergingIterator
MergingIterator	table/merger.cc	/^class MergingIterator : public Iterator {$/;"	c	namespace:leveldb::__anon14	file:
Message_Block	port/sha1_portable.cc	/^  unsigned char Message_Block[64]; \/* 512-bit message blocks      *\/$/;"	m	struct:leveldb::port::SHA1Context	file:
Message_Block_Index	port/sha1_portable.cc	/^  int Message_Block_Index;    \/* Index into message block array   *\/$/;"	m	struct:leveldb::port::SHA1Context	file:
Message_Digest	port/sha1_portable.cc	/^  unsigned Message_Digest[5]; \/* Message Digest (output)          *\/$/;"	m	struct:leveldb::port::SHA1Context	file:
ModelDB	db/db_test.cc	/^  explicit ModelDB(const Options& options): options_(options) { }$/;"	f	class:leveldb::ModelDB
ModelDB	db/db_test.cc	/^class ModelDB: public DB {$/;"	c	namespace:leveldb	file:
ModelIter	db/db_test.cc	/^    ModelIter(const KVMap* map, bool owned)$/;"	f	class:leveldb::ModelDB::ModelIter
ModelIter	db/db_test.cc	/^  class ModelIter: public Iterator {$/;"	c	class:leveldb::ModelDB	file:
Mutex	port/port_android.cc	/^Mutex::Mutex() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	port/port_android.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	port/port_chromium.cc	/^Mutex::Mutex() {$/;"	f	class:leveldb::port::Mutex
Mutex	port/port_chromium.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	port/port_example.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	port/port_posix.cc	/^Mutex::Mutex() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	port/port_posix.h	/^class Mutex {$/;"	c	namespace:leveldb::port
MutexLock	util/mutexlock.h	/^  explicit MutexLock(port::Mutex *mu) : mu_(mu) {$/;"	f	class:leveldb::MutexLock
MutexLock	util/mutexlock.h	/^class MutexLock {$/;"	c	namespace:leveldb
Name	db/dbformat.cc	/^const char* InternalKeyComparator::Name() const {$/;"	f	class:leveldb::InternalKeyComparator
Name	table/table_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon9::ReverseKeyComparator
Name	util/comparator.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon15::BytewiseComparatorImpl
NeedsCompaction	db/version_set.h	/^  bool NeedsCompaction() const { return current_->compaction_score_ >= 1; }$/;"	f	class:leveldb::VersionSet
New	db/snapshot.h	/^  const Snapshot* New(SequenceNumber seq) {$/;"	f	class:leveldb::SnapshotList
NewConcatenatingIterator	db/version_set.cc	/^Iterator* Version::NewConcatenatingIterator(const ReadOptions& options,$/;"	f	class:leveldb::Version
NewDB	db/db_impl.cc	/^Status DBImpl::NewDB() {$/;"	f	class:leveldb::DBImpl
NewDB	table/table_test.cc	/^  void NewDB() {$/;"	f	class:leveldb::DBConstructor	file:
NewDBIterator	db/db_iter.cc	/^Iterator* NewDBIterator($/;"	f	namespace:leveldb
NewEmptyIterator	table/iterator.cc	/^Iterator* NewEmptyIterator() {$/;"	f	namespace:leveldb
NewErrorIterator	table/iterator.cc	/^Iterator* NewErrorIterator(const Status& status) {$/;"	f	namespace:leveldb
NewFileNumber	db/version_set.h	/^  uint64_t NewFileNumber() { return next_file_number_++; }$/;"	f	class:leveldb::VersionSet
NewId	util/cache.cc	/^uint64_t LRUCache::NewId() {$/;"	f	class:leveldb::__anon22::LRUCache
NewInternalIterator	db/db_impl.cc	/^Iterator* DBImpl::NewInternalIterator(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
NewIterator	db/db_impl.cc	/^Iterator* DBImpl::NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::DBImpl
NewIterator	db/db_test.cc	/^  virtual Iterator* NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::ModelDB
NewIterator	db/memtable.cc	/^Iterator* MemTable::NewIterator() {$/;"	f	class:leveldb::MemTable
NewIterator	db/table_cache.cc	/^Iterator* TableCache::NewIterator(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
NewIterator	table/block.cc	/^Iterator* Block::NewIterator(const Comparator* cmp) {$/;"	f	class:leveldb::Block
NewIterator	table/table.cc	/^Iterator* Table::NewIterator(const ReadOptions& options) const {$/;"	f	class:leveldb::Table
NewIterator	table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::BlockConstructor
NewIterator	table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::DBConstructor
NewIterator	table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::MemTableConstructor
NewIterator	table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::TableConstructor
NewLRUCache	util/cache.cc	/^Cache* NewLRUCache(size_t capacity) {$/;"	f	namespace:leveldb
NewMergingIterator	table/merger.cc	/^Iterator* NewMergingIterator(const Comparator* cmp, Iterator** list, int n) {$/;"	f	namespace:leveldb
NewNode	db/skiplist.h	/^SkipList<Key,Comparator>::NewNode(const Key& key, int height) {$/;"	f	class:leveldb::SkipList
NewRandomAccessFile	include/leveldb/env.h	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewRandomAccessFile	util/env_chromium.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon20::ChromiumEnv
NewRandomAccessFile	util/env_posix.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon17::PosixEnv
NewSequentialFile	include/leveldb/env.h	/^  Status NewSequentialFile(const std::string& f, SequentialFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewSequentialFile	util/env_chromium.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon20::ChromiumEnv
NewSequentialFile	util/env_posix.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon17::PosixEnv
NewTwoLevelIterator	table/two_level_iterator.cc	/^Iterator* NewTwoLevelIterator($/;"	f	namespace:leveldb
NewWritableFile	include/leveldb/env.h	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewWritableFile	util/env_chromium.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon20::ChromiumEnv
NewWritableFile	util/env_posix.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon17::PosixEnv
NewWritableFile	util/testutil.h	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
Next	db/db_iter.cc	/^void DBIter::Next() {$/;"	f	class:leveldb::__anon5::DBIter
Next	db/db_test.cc	/^    virtual void Next() { ++iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Next	db/memtable.cc	/^  virtual void Next() { iter_->Next(); }$/;"	f	class:leveldb::MemTableIterator
Next	db/skiplist.h	/^  Node* Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
Next	db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Next() {$/;"	f	class:leveldb::SkipList::Iterator
Next	db/version_set.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Next	db/write_batch.cc	/^void WriteBatchInternal::Iterator::Next() {$/;"	f	class:leveldb::WriteBatchInternal::Iterator
Next	table/block.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Block::Iter
Next	table/iterator.cc	/^  virtual void Next() { assert(false); }$/;"	f	class:leveldb::__anon13::EmptyIterator
Next	table/iterator_wrapper.h	/^  void Next() { assert(iter_); iter_->Next(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
Next	table/merger.cc	/^  virtual void Next() {$/;"	f	class:leveldb::__anon14::MergingIterator
Next	table/table_test.cc	/^  virtual void Next() { iter_->Next(); }$/;"	f	class:leveldb::KeyConvertingIterator
Next	table/two_level_iterator.cc	/^void TwoLevelIterator::Next() {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
Next	util/random.h	/^  uint32_t Next() {$/;"	f	class:leveldb::Random
NextEntryOffset	table/block.cc	/^  inline uint32_t NextEntryOffset() const {$/;"	f	class:leveldb::Block::Iter	file:
NoBarrier_Load	port/port_android.h	/^  inline void* NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Load	port/port_chromium.h	/^  inline void* NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Load	port/port_posix.h	/^  inline void* NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Next	db/skiplist.h	/^  Node* NoBarrier_Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_SetNext	db/skiplist.h	/^  void NoBarrier_SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_Store	port/port_android.h	/^  inline void NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Store	port/port_chromium.h	/^  inline void NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Store	port/port_posix.h	/^  inline void NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Node	db/skiplist.h	/^  explicit Node(const Key& k) : key(k) { }$/;"	f	struct:leveldb::SkipList::Node
Node	db/skiplist.h	/^struct SkipList<Key,Comparator>::Node {$/;"	s	class:leveldb::SkipList
NotFound	include/leveldb/status.h	/^  static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NotSupported	include/leveldb/status.h	/^  static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NowMicros	include/leveldb/env.h	/^  uint64_t NowMicros() {$/;"	f	class:leveldb::EnvWrapper
NowMicros	util/env_chromium.cc	/^  virtual uint64_t NowMicros() {$/;"	f	class:leveldb::__anon20::ChromiumEnv
NowMicros	util/env_posix.cc	/^  virtual uint64_t NowMicros() {$/;"	f	class:leveldb::__anon17::PosixEnv
NullWritableFile	db/db_impl.cc	/^class NullWritableFile : public WritableFile {$/;"	c	namespace:leveldb::__anon1	file:
NumBytes	table/table_test.cc	/^  virtual size_t NumBytes() const { return block_size_; }$/;"	f	class:leveldb::BlockConstructor
NumBytes	table/table_test.cc	/^  virtual size_t NumBytes() const { return source_->Size(); }$/;"	f	class:leveldb::TableConstructor
NumBytes	table/table_test.cc	/^  virtual size_t NumBytes() const {$/;"	f	class:leveldb::DBConstructor
NumBytes	table/table_test.cc	/^  virtual size_t NumBytes() const {$/;"	f	class:leveldb::MemTableConstructor
NumEntries	table/table_builder.cc	/^uint64_t TableBuilder::NumEntries() const {$/;"	f	class:leveldb::TableBuilder
NumLevelBytes	db/version_set.cc	/^int64_t VersionSet::NumLevelBytes(int level) const {$/;"	f	class:leveldb::VersionSet
NumLevelFiles	db/version_set.cc	/^int VersionSet::NumLevelFiles(int level) const {$/;"	f	class:leveldb::VersionSet
NumRestarts	table/block.cc	/^inline uint32_t Block::NumRestarts() const {$/;"	f	class:leveldb::Block
NumTableFilesAtLevel	db/db_test.cc	/^  int NumTableFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumberString	db/log_test.cc	/^static std::string NumberString(int n) {$/;"	f	namespace:leveldb::log
NumberToString	util/logging.cc	/^std::string NumberToString(uint64_t num) {$/;"	f	namespace:leveldb
OK	include/leveldb/status.h	/^  static Status OK() { return Status(); }$/;"	f	class:leveldb::Status
OPT	Makefile	/^OPT = -g2$/;"	m
OldInfoLogFileName	db/filename.cc	/^std::string OldInfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
OneIn	util/random.h	/^  bool OneIn(int n) { return (Next() % n) == 0; }$/;"	f	class:leveldb::Random
Open	db/db_bench.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark	file:
Open	db/db_impl.cc	/^Status DB::Open(const Options& options, const std::string& dbname,$/;"	f	class:leveldb::DB
Open	table/table.cc	/^Status Table::Open(const Options& options,$/;"	f	class:leveldb::Table
OpenCompactionOutputFile	db/db_impl.cc	/^Status DBImpl::OpenCompactionOutputFile(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
Options	include/leveldb/options.h	/^struct Options {$/;"	s	namespace:leveldb
Options	util/options.cc	/^Options::Options()$/;"	f	class:leveldb::Options
Order	db/db_bench.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
Output	db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::CompactionState	file:
PROGRAMS	Makefile	/^PROGRAMS = db_bench $(TESTS)$/;"	m
PackSequenceAndType	db/dbformat.cc	/^static uint64_t PackSequenceAndType(uint64_t seq, ValueType t) {$/;"	f	namespace:leveldb
ParseFileName	db/filename.cc	/^bool ParseFileName(const std::string& fname,$/;"	f	namespace:leveldb
ParseInternalKey	db/dbformat.h	/^inline bool ParseInternalKey(const Slice& internal_key,$/;"	f	namespace:leveldb
ParseKey	db/db_iter.cc	/^inline bool DBIter::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::__anon5::DBIter
ParseNextKey	table/block.cc	/^  bool ParseNextKey() {$/;"	f	class:leveldb::Block::Iter	file:
ParsedInternalKey	db/dbformat.h	/^  ParsedInternalKey() { }  \/\/ Intentionally left uninitialized (for speed)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	db/dbformat.h	/^  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	db/dbformat.h	/^struct ParsedInternalKey {$/;"	s	namespace:leveldb
Percentile	util/histogram.cc	/^double Histogram::Percentile(double p) const {$/;"	f	class:leveldb::Histogram
PickCompaction	db/version_set.cc	/^Compaction* VersionSet::PickCompaction() {$/;"	f	class:leveldb::VersionSet
PickRandomKey	table/table_test.cc	/^  std::string PickRandomKey(Random* rnd, const std::vector<std::string>& keys) {$/;"	f	class:leveldb::Harness
PlatformFileErrorString	util/env_chromium.cc	/^const char* PlatformFileErrorString(const ::base::PlatformFileError& error) {$/;"	f	namespace:leveldb::__anon20
PosixEnv	util/env_posix.cc	/^PosixEnv::PosixEnv() : page_size_(getpagesize()),$/;"	f	class:leveldb::__anon17::PosixEnv
PosixEnv	util/env_posix.cc	/^class PosixEnv : public Env {$/;"	c	namespace:leveldb::__anon17	file:
PosixFileLock	util/env_posix.cc	/^class PosixFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon17	file:
PosixMmapFile	util/env_posix.cc	/^  PosixMmapFile(const std::string& fname, int fd, size_t page_size)$/;"	f	class:leveldb::__anon17::PosixMmapFile
PosixMmapFile	util/env_posix.cc	/^class PosixMmapFile : public WritableFile {$/;"	c	namespace:leveldb::__anon17	file:
PosixRandomAccessFile	util/env_posix.cc	/^  PosixRandomAccessFile(const std::string& fname, int fd)$/;"	f	class:leveldb::__anon17::PosixRandomAccessFile
PosixRandomAccessFile	util/env_posix.cc	/^class PosixRandomAccessFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon17	file:
PosixSequentialFile	util/env_posix.cc	/^  PosixSequentialFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon17::PosixSequentialFile
PosixSequentialFile	util/env_posix.cc	/^class PosixSequentialFile: public SequentialFile {$/;"	c	namespace:leveldb::__anon17	file:
Prev	db/db_iter.cc	/^void DBIter::Prev() {$/;"	f	class:leveldb::__anon5::DBIter
Prev	db/db_test.cc	/^    virtual void Prev() { --iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Prev	db/memtable.cc	/^  virtual void Prev() { iter_->Prev(); }$/;"	f	class:leveldb::MemTableIterator
Prev	db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Prev() {$/;"	f	class:leveldb::SkipList::Iterator
Prev	db/version_set.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Prev	table/block.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Block::Iter
Prev	table/iterator.cc	/^  virtual void Prev() { assert(false); }$/;"	f	class:leveldb::__anon13::EmptyIterator
Prev	table/iterator_wrapper.h	/^  void Prev() { assert(iter_); iter_->Prev(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
Prev	table/merger.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::__anon14::MergingIterator
Prev	table/table_test.cc	/^  virtual void Prev() { iter_->Prev(); }$/;"	f	class:leveldb::KeyConvertingIterator
Prev	table/two_level_iterator.cc	/^void TwoLevelIterator::Prev() {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
PrevLogNumber	db/version_set.h	/^  uint64_t PrevLogNumber() const { return prev_log_number_; }$/;"	f	class:leveldb::VersionSet
PrintContents	db/write_batch_test.cc	/^static std::string PrintContents(WriteBatch* b) {$/;"	f	namespace:leveldb
PrintEnvironment	db/db_bench.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	db/db_bench.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintStats	db/db_bench.cc	/^  void PrintStats() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	db/db_bench.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
Property	db/corruption_test.cc	/^  int Property(const std::string& name) {$/;"	f	class:leveldb::CorruptionTest
PthreadCall	port/port_android.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	port/port_posix.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	util/env_posix.cc	/^  void PthreadCall(const char* label, int result) {$/;"	f	class:leveldb::__anon17::PosixEnv	file:
Put	db/db_impl.cc	/^Status DB::Put(const WriteOptions& opt, const Slice& key, const Slice& value) {$/;"	f	class:leveldb::DB
Put	db/db_impl.cc	/^Status DBImpl::Put(const WriteOptions& o, const Slice& key, const Slice& val) {$/;"	f	class:leveldb::DBImpl
Put	db/db_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::DBTest
Put	db/db_test.cc	/^  virtual Status Put(const WriteOptions& o, const Slice& k, const Slice& v) {$/;"	f	class:leveldb::ModelDB
Put	db/write_batch.cc	/^void WriteBatch::Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::WriteBatch
PutFixed32	util/coding.cc	/^void PutFixed32(std::string* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed64	util/coding.cc	/^void PutFixed64(std::string* dst, uint64_t value) {$/;"	f	namespace:leveldb
PutLengthPrefixedSlice	util/coding.cc	/^void PutLengthPrefixedSlice(std::string* dst, const Slice& value) {$/;"	f	namespace:leveldb
PutVarint32	util/coding.cc	/^void PutVarint32(std::string* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint64	util/coding.cc	/^void PutVarint64(std::string* dst, uint64_t v) {$/;"	f	namespace:leveldb
RANDOM	db/db_bench.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RUNNING	db/skiplist_test.cc	/^    RUNNING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
Random	util/random.h	/^  explicit Random(uint32_t s) : seed_(s & 0x7fffffffu) { }$/;"	f	class:leveldb::Random
Random	util/random.h	/^class Random {$/;"	c	namespace:leveldb
RandomAccessFile	include/leveldb/env.h	/^  RandomAccessFile() { }$/;"	f	class:leveldb::RandomAccessFile
RandomAccessFile	include/leveldb/env.h	/^class RandomAccessFile {$/;"	c	namespace:leveldb
RandomGenerator	db/db_bench.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon7::RandomGenerator
RandomGenerator	db/db_bench.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon7	file:
RandomHeight	db/skiplist.h	/^int SkipList<Key,Comparator>::RandomHeight() {$/;"	f	class:leveldb::SkipList
RandomKey	db/db_test.cc	/^static std::string RandomKey(Random* rnd) {$/;"	f	namespace:leveldb
RandomKey	util/testutil.cc	/^std::string RandomKey(Random* rnd, int len) {$/;"	f	namespace:leveldb::test
RandomSeed	util/testharness.cc	/^int RandomSeed() {$/;"	f	namespace:leveldb::test
RandomSkewedString	db/log_test.cc	/^static std::string RandomSkewedString(int i, Random* rnd) {$/;"	f	namespace:leveldb::log
RandomString	db/db_test.cc	/^static std::string RandomString(Random* rnd, int len) {$/;"	f	namespace:leveldb
RandomString	util/testutil.cc	/^Slice RandomString(Random* rnd, int len, std::string* dst) {$/;"	f	namespace:leveldb::test
RandomTarget	db/skiplist_test.cc	/^  static Key RandomTarget(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest	file:
Range	include/leveldb/db.h	/^  Range(const Slice& s, const Slice& l) : start(s), limit(l) { }$/;"	f	struct:leveldb::Range
Range	include/leveldb/db.h	/^struct Range {$/;"	s	namespace:leveldb
Read	db/log_test.cc	/^    virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::log::LogTest::StringSource
Read	db/log_test.cc	/^  std::string Read() {$/;"	f	class:leveldb::log::LogTest
Read	table/table_test.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::StringSource
Read	util/env_chromium.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon20::ChromiumSequentialFile
Read	util/env_chromium.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon20::ChromiumRandomAccessFile
Read	util/env_posix.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon17::PosixSequentialFile
Read	util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon17::PosixRandomAccessFile
ReadBlock	table/format.cc	/^Status ReadBlock(RandomAccessFile* file,$/;"	f	namespace:leveldb
ReadFileToString	util/env.cc	/^Status ReadFileToString(Env* env, const std::string& fname, std::string* data) {$/;"	f	namespace:leveldb
ReadOptions	include/leveldb/options.h	/^  ReadOptions()$/;"	f	struct:leveldb::ReadOptions
ReadOptions	include/leveldb/options.h	/^struct ReadOptions {$/;"	s	namespace:leveldb
ReadPhysicalRecord	db/log_reader.cc	/^unsigned int Reader::ReadPhysicalRecord(Slice* result) {$/;"	f	class:leveldb::log::Reader
ReadRandom	db/db_bench.cc	/^  void ReadRandom() {$/;"	f	class:leveldb::Benchmark	file:
ReadRecord	db/log_reader.cc	/^bool Reader::ReadRecord(Slice* record, std::string* scratch) {$/;"	f	class:leveldb::log::Reader
ReadReverse	db/db_bench.cc	/^  void ReadReverse() {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	db/db_bench.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark	file:
ReadStep	db/skiplist_test.cc	/^  void ReadStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
Reader	db/log_reader.cc	/^Reader::Reader(SequentialFile* file, Reporter* reporter, bool checksum)$/;"	f	class:leveldb::log::Reader
Reader	db/log_reader.h	/^class Reader {$/;"	c	namespace:leveldb::log
ReaderState	db/skiplist_test.cc	/^  enum ReaderState {$/;"	g	class:leveldb::TestState	file:
RecordType	db/log_format.h	/^enum RecordType {$/;"	g	namespace:leveldb::log
Recover	db/db_impl.cc	/^Status DBImpl::Recover(VersionEdit* edit) {$/;"	f	class:leveldb::DBImpl
Recover	db/version_set.cc	/^Status VersionSet::Recover() {$/;"	f	class:leveldb::VersionSet
RecoverLogFile	db/db_impl.cc	/^Status DBImpl::RecoverLogFile(uint64_t log_number,$/;"	f	class:leveldb::DBImpl
Ref	db/version_set.cc	/^void Version::Ref() {$/;"	f	class:leveldb::Version
RegisterCleanup	table/iterator.cc	/^void Iterator::RegisterCleanup(CleanupFunction func, void* arg1, void* arg2) {$/;"	f	class:leveldb::Iterator
RegisterTest	util/testharness.cc	/^bool RegisterTest(const char* base, const char* name, void (*func)()) {$/;"	f	namespace:leveldb::test
Release	util/cache.cc	/^void LRUCache::Release(Handle* handle) {$/;"	f	class:leveldb::__anon22::LRUCache
ReleaseBlock	table/table.cc	/^static void ReleaseBlock(void* arg, void* h) {$/;"	f	namespace:leveldb
ReleaseInputs	db/version_set.cc	/^void Compaction::ReleaseInputs() {$/;"	f	class:leveldb::Compaction
ReleaseSnapshot	db/db_impl.cc	/^void DBImpl::ReleaseSnapshot(const Snapshot* s) {$/;"	f	class:leveldb::DBImpl
ReleaseSnapshot	db/db_test.cc	/^  virtual void ReleaseSnapshot(const Snapshot* snapshot) {$/;"	f	class:leveldb::ModelDB
Release_Store	port/port_android.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Release_Store	port/port_chromium.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Release_Store	port/port_posix.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
RenameFile	include/leveldb/env.h	/^  Status RenameFile(const std::string& s, const std::string& t) {$/;"	f	class:leveldb::EnvWrapper
RenameFile	util/env_chromium.cc	/^  virtual Status RenameFile(const std::string& src, const std::string& dst) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
RenameFile	util/env_posix.cc	/^  virtual Status RenameFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon17::PosixEnv
Reopen	db/corruption_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::CorruptionTest
Reopen	db/db_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
Rep	port/port_chromium.h	/^  typedef base::subtle::AtomicWord Rep;$/;"	t	class:leveldb::port::AtomicPointer
Rep	table/table.cc	/^struct Table::Rep {$/;"	s	class:leveldb::Table	file:
Rep	table/table_builder.cc	/^  Rep(const Options& opt, WritableFile* f)$/;"	f	struct:leveldb::TableBuilder::Rep
Rep	table/table_builder.cc	/^struct TableBuilder::Rep {$/;"	s	class:leveldb::TableBuilder	file:
RepairDB	db/corruption_test.cc	/^  void RepairDB() {$/;"	f	class:leveldb::CorruptionTest
RepairDB	db/repair.cc	/^Status RepairDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
Repairer	db/repair.cc	/^  Repairer(const std::string& dbname, const Options& options)$/;"	f	class:leveldb::__anon3::Repairer
Repairer	db/repair.cc	/^class Repairer {$/;"	c	namespace:leveldb::__anon3	file:
ReportCollector	db/log_test.cc	/^    ReportCollector() : dropped_bytes_(0) { }$/;"	f	class:leveldb::log::LogTest::ReportCollector
ReportCollector	db/log_test.cc	/^  class ReportCollector : public Reader::Reporter {$/;"	c	class:leveldb::log::LogTest	file:
ReportDrop	db/log_reader.cc	/^void Reader::ReportDrop(size_t bytes, const char* reason) {$/;"	f	class:leveldb::log::Reader
Reporter	db/log_reader.h	/^  class Reporter {$/;"	c	class:leveldb::log::Reader
Reset	table/block_builder.cc	/^void BlockBuilder::Reset() {$/;"	f	class:leveldb::BlockBuilder
Reset	table/table_test.cc	/^  void Reset() {$/;"	f	class:leveldb::TableConstructor	file:
Reverse	table/table_test.cc	/^static std::string Reverse(const Slice& key) {$/;"	f	namespace:leveldb
ReverseKeyComparator	table/table_test.cc	/^class ReverseKeyComparator : public Comparator {$/;"	c	namespace:leveldb::__anon9	file:
Roundup	util/env_posix.cc	/^  static size_t Roundup(size_t x, size_t y) {$/;"	f	class:leveldb::__anon17::PosixMmapFile	file:
Run	db/db_bench.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	db/repair.cc	/^  Status Run() {$/;"	f	class:leveldb::__anon3::Repairer
RunAllTests	util/testharness.cc	/^int RunAllTests() {$/;"	f	namespace:leveldb::test
RunConcurrent	db/skiplist_test.cc	/^static void RunConcurrent(int run) {$/;"	f	namespace:leveldb
SEQUENTIAL	db/db_bench.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SHA1	port/sha1_test.cc	/^class SHA1 { };$/;"	c	namespace:leveldb::port	file:
SHA1CircularShift	port/sha1_portable.cc	74;"	d	file:
SHA1Context	port/sha1_portable.cc	/^typedef struct SHA1Context {$/;"	s	namespace:leveldb::port	file:
SHA1Context	port/sha1_portable.cc	/^} SHA1Context;$/;"	t	namespace:leveldb::port	typeref:struct:leveldb::port::SHA1Context	file:
SHA1Input	port/sha1_portable.cc	/^static void SHA1Input(SHA1Context         *context,$/;"	f	namespace:leveldb::port
SHA1PadMessage	port/sha1_portable.cc	/^static void SHA1PadMessage(SHA1Context *context) {$/;"	f	namespace:leveldb::port
SHA1ProcessMessageBlock	port/sha1_portable.cc	/^static void SHA1ProcessMessageBlock(SHA1Context *context) {$/;"	f	namespace:leveldb::port
SHA1Reset	port/sha1_portable.cc	/^static void SHA1Reset(SHA1Context* context) {$/;"	f	namespace:leveldb::port
SHA1Result	port/sha1_portable.cc	/^static bool SHA1Result(SHA1Context *context) {$/;"	f	namespace:leveldb::port
SHA1_Hash_Portable	port/sha1_portable.cc	/^void SHA1_Hash_Portable(const char* data, size_t len, char* hash_array) {$/;"	f	namespace:leveldb::port
STARTING	db/skiplist_test.cc	/^    STARTING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
STEP1	util/crc32c.cc	291;"	d	file:
STEP1	util/crc32c.cc	327;"	d	file:
STEP4	util/crc32c.cc	295;"	d	file:
STEP4	util/crc32c.cc	326;"	d	file:
STLLessThan	table/table_test.cc	/^  STLLessThan() : cmp(BytewiseComparator()) { }$/;"	f	struct:leveldb::__anon10::STLLessThan
STLLessThan	table/table_test.cc	/^  STLLessThan(const Comparator* c) : cmp(c) { }$/;"	f	struct:leveldb::__anon10::STLLessThan
STLLessThan	table/table_test.cc	/^struct STLLessThan {$/;"	s	namespace:leveldb::__anon10	file:
STORAGE_LEVELDB_DB_BUILDER_H_	db/builder.h	6;"	d
STORAGE_LEVELDB_DB_DB_IMPL_H_	db/db_impl.h	6;"	d
STORAGE_LEVELDB_DB_DB_ITER_H_	db/db_iter.h	6;"	d
STORAGE_LEVELDB_DB_FILENAME_H_	db/filename.h	8;"	d
STORAGE_LEVELDB_DB_FORMAT_H_	db/dbformat.h	6;"	d
STORAGE_LEVELDB_DB_LOG_FORMAT_H_	db/log_format.h	9;"	d
STORAGE_LEVELDB_DB_LOG_READER_H_	db/log_reader.h	6;"	d
STORAGE_LEVELDB_DB_LOG_WRITER_H_	db/log_writer.h	6;"	d
STORAGE_LEVELDB_DB_MEMTABLE_H_	db/memtable.h	6;"	d
STORAGE_LEVELDB_DB_SNAPSHOT_H_	db/snapshot.h	6;"	d
STORAGE_LEVELDB_DB_TABLE_CACHE_H_	db/table_cache.h	8;"	d
STORAGE_LEVELDB_DB_VERSION_EDIT_H_	db/version_edit.h	6;"	d
STORAGE_LEVELDB_DB_VERSION_SET_H_	db/version_set.h	16;"	d
STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_	db/write_batch_internal.h	6;"	d
STORAGE_LEVELDB_INCLUDE_CACHE_H_	include/leveldb/cache.h	19;"	d
STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_	include/leveldb/comparator.h	6;"	d
STORAGE_LEVELDB_INCLUDE_DB_H_	include/leveldb/db.h	6;"	d
STORAGE_LEVELDB_INCLUDE_ENV_H_	include/leveldb/env.h	11;"	d
STORAGE_LEVELDB_INCLUDE_ITERATOR_H_	include/leveldb/iterator.h	11;"	d
STORAGE_LEVELDB_INCLUDE_OPTIONS_H_	include/leveldb/options.h	6;"	d
STORAGE_LEVELDB_INCLUDE_SLICE_H_	include/leveldb/slice.h	11;"	d
STORAGE_LEVELDB_INCLUDE_STATUS_H_	include/leveldb/status.h	9;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_	include/leveldb/table_builder.h	9;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_H_	include/leveldb/table.h	6;"	d
STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_	include/leveldb/write_batch.h	17;"	d
STORAGE_LEVELDB_PORT_PORT_ANDROID_H_	port/port_android.h	8;"	d
STORAGE_LEVELDB_PORT_PORT_CHROMIUM_H_	port/port_chromium.h	8;"	d
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	port/port_example.h	11;"	d
STORAGE_LEVELDB_PORT_PORT_H_	port/port.h	6;"	d
STORAGE_LEVELDB_PORT_PORT_POSIX_H_	port/port_posix.h	8;"	d
STORAGE_LEVELDB_PORT_SHA1_PORTABLE_H_	port/sha1_portable.h	6;"	d
STORAGE_LEVELDB_PORT_WIN_STDINT_H_	port/win/stdint.h	8;"	d
STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_	table/block_builder.h	6;"	d
STORAGE_LEVELDB_TABLE_BLOCK_H_	table/block.h	6;"	d
STORAGE_LEVELDB_TABLE_FORMAT_H_	table/format.h	6;"	d
STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_	table/iterator_wrapper.h	6;"	d
STORAGE_LEVELDB_TABLE_MERGER_H_	table/merger.h	6;"	d
STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_	table/two_level_iterator.h	6;"	d
STORAGE_LEVELDB_UTIL_ARENA_H_	util/arena.h	6;"	d
STORAGE_LEVELDB_UTIL_CODING_H_	util/coding.h	11;"	d
STORAGE_LEVELDB_UTIL_CRC32C_H_	util/crc32c.h	6;"	d
STORAGE_LEVELDB_UTIL_HASH_H_	util/hash.h	8;"	d
STORAGE_LEVELDB_UTIL_HISTOGRAM_H_	util/histogram.h	6;"	d
STORAGE_LEVELDB_UTIL_LOGGING_H_	util/logging.h	9;"	d
STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_	util/mutexlock.h	6;"	d
STORAGE_LEVELDB_UTIL_RANDOM_H_	util/random.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTHARNESS_H_	util/testharness.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTUTIL_H_	util/testutil.h	6;"	d
SanitizeOptions	db/db_impl.cc	/^Options SanitizeOptions(const std::string& dbname,$/;"	f	namespace:leveldb
SaveError	table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon8::TwoLevelIterator	file:
SaveKey	db/db_iter.cc	/^  inline void SaveKey(const Slice& k, std::string* dst) {$/;"	f	class:leveldb::__anon5::DBIter	file:
SaveTo	db/version_set.cc	/^  void SaveTo(Version* v) {$/;"	f	class:leveldb::VersionSet::Builder
ScanTable	db/repair.cc	/^  Status ScanTable(TableInfo* t) {$/;"	f	class:leveldb::__anon3::Repairer	file:
Schedule	include/leveldb/env.h	/^  void Schedule(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
Schedule	util/env_chromium.cc	/^void ChromiumEnv::Schedule(void (*function)(void*), void* arg) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
Schedule	util/env_posix.cc	/^void PosixEnv::Schedule(void (*function)(void*), void* arg) {$/;"	f	class:leveldb::__anon17::PosixEnv
Seek	db/db_iter.cc	/^void DBIter::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon5::DBIter
Seek	db/db_test.cc	/^    virtual void Seek(const Slice& k) {$/;"	f	class:leveldb::ModelDB::ModelIter
Seek	db/memtable.cc	/^  virtual void Seek(const Slice& k) { iter_->Seek(EncodeKey(&tmp_, k)); }$/;"	f	class:leveldb::MemTableIterator
Seek	db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Seek(const Key& target) {$/;"	f	class:leveldb::SkipList::Iterator
Seek	db/version_set.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Seek	table/block.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Block::Iter
Seek	table/iterator.cc	/^  virtual void Seek(const Slice& target) { }$/;"	f	class:leveldb::__anon13::EmptyIterator
Seek	table/iterator_wrapper.h	/^  void Seek(const Slice& k) { assert(iter_); iter_->Seek(k); Update(); }$/;"	f	class:leveldb::IteratorWrapper
Seek	table/merger.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::__anon14::MergingIterator
Seek	table/table_test.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::KeyConvertingIterator
Seek	table/two_level_iterator.cc	/^void TwoLevelIterator::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
SeekToFirst	db/db_iter.cc	/^void DBIter::SeekToFirst() {$/;"	f	class:leveldb::__anon5::DBIter
SeekToFirst	db/db_test.cc	/^    virtual void SeekToFirst() { iter_ = map_->begin(); }$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToFirst	db/memtable.cc	/^  virtual void SeekToFirst() { iter_->SeekToFirst(); }$/;"	f	class:leveldb::MemTableIterator
SeekToFirst	db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToFirst() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToFirst	db/version_set.cc	/^  virtual void SeekToFirst() { index_ = 0; }$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToFirst	table/block.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Block::Iter
SeekToFirst	table/iterator.cc	/^  virtual void SeekToFirst() { }$/;"	f	class:leveldb::__anon13::EmptyIterator
SeekToFirst	table/iterator_wrapper.h	/^  void SeekToFirst() { assert(iter_); iter_->SeekToFirst(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToFirst	table/merger.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::__anon14::MergingIterator
SeekToFirst	table/table_test.cc	/^  virtual void SeekToFirst() { iter_->SeekToFirst(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToFirst	table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToFirst() {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
SeekToLast	db/db_iter.cc	/^void DBIter::SeekToLast() {$/;"	f	class:leveldb::__anon5::DBIter
SeekToLast	db/db_test.cc	/^    virtual void SeekToLast() {$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToLast	db/memtable.cc	/^  virtual void SeekToLast() { iter_->SeekToLast(); }$/;"	f	class:leveldb::MemTableIterator
SeekToLast	db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToLast() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToLast	db/version_set.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToLast	table/block.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Block::Iter
SeekToLast	table/iterator.cc	/^  virtual void SeekToLast() { }$/;"	f	class:leveldb::__anon13::EmptyIterator
SeekToLast	table/iterator_wrapper.h	/^  void SeekToLast() { assert(iter_); iter_->SeekToLast(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToLast	table/merger.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::__anon14::MergingIterator
SeekToLast	table/table_test.cc	/^  virtual void SeekToLast() { iter_->SeekToLast(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToLast	table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToLast() {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
SeekToRestartPoint	table/block.cc	/^  void SeekToRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
Sequence	db/write_batch.cc	/^SequenceNumber WriteBatchInternal::Sequence(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
SequenceNumber	db/dbformat.h	/^typedef uint64_t SequenceNumber;$/;"	t	namespace:leveldb
SequentialFile	include/leveldb/env.h	/^  SequentialFile() { }$/;"	f	class:leveldb::SequentialFile
SequentialFile	include/leveldb/env.h	/^class SequentialFile {$/;"	c	namespace:leveldb
Set	db/skiplist_test.cc	/^    void Set(int k, intptr_t v) {$/;"	f	struct:leveldb::ConcurrentTest::State
Set	table/iterator_wrapper.h	/^  void Set(Iterator* iter) {$/;"	f	class:leveldb::IteratorWrapper
SetBool	util/env_test.cc	/^static void SetBool(void* ptr) {$/;"	f	namespace:leveldb
SetByte	db/log_test.cc	/^  void SetByte(int offset, char new_byte) {$/;"	f	class:leveldb::log::LogTest
SetCompactPointer	db/version_edit.h	/^  void SetCompactPointer(int level, const InternalKey& key) {$/;"	f	class:leveldb::VersionEdit
SetComparatorName	db/version_edit.h	/^  void SetComparatorName(const Slice& name) {$/;"	f	class:leveldb::VersionEdit
SetContents	db/write_batch.cc	/^void WriteBatchInternal::SetContents(WriteBatch* b, const Slice& contents) {$/;"	f	class:leveldb::WriteBatchInternal
SetCount	db/write_batch.cc	/^void WriteBatchInternal::SetCount(WriteBatch* b, int n) {$/;"	f	class:leveldb::WriteBatchInternal
SetCurrentFile	db/filename.cc	/^Status SetCurrentFile(Env* env, const std::string& dbname,$/;"	f	namespace:leveldb
SetDataIterator	table/two_level_iterator.cc	/^void TwoLevelIterator::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
SetFrom	db/dbformat.h	/^  void SetFrom(const ParsedInternalKey& p) {$/;"	f	class:leveldb::InternalKey
SetLastSequence	db/version_edit.h	/^  void SetLastSequence(SequenceNumber seq) {$/;"	f	class:leveldb::VersionEdit
SetLastSequence	db/version_set.h	/^  void SetLastSequence(uint64_t s) {$/;"	f	class:leveldb::VersionSet
SetLogNumber	db/version_edit.h	/^  void SetLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetNext	db/skiplist.h	/^  void SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
SetNextFile	db/version_edit.h	/^  void SetNextFile(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetPrevLogNumber	db/version_edit.h	/^  void SetPrevLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetSequence	db/write_batch.cc	/^void WriteBatchInternal::SetSequence(WriteBatch* b, SequenceNumber seq) {$/;"	f	class:leveldb::WriteBatchInternal
SetupOtherInputs	db/version_set.cc	/^void VersionSet::SetupOtherInputs(Compaction* c) {$/;"	f	class:leveldb::VersionSet
ShortSuccessor	db/dbformat_test.cc	/^static std::string ShortSuccessor(const std::string& s) {$/;"	f	namespace:leveldb
Shorten	db/dbformat_test.cc	/^static std::string Shorten(const std::string& s, const std::string& l) {$/;"	f	namespace:leveldb
ShouldStopBefore	db/version_set.cc	/^bool Compaction::ShouldStopBefore(const InternalKey& key) {$/;"	f	class:leveldb::Compaction
ShrinkSize	db/log_test.cc	/^  void ShrinkSize(int bytes) {$/;"	f	class:leveldb::log::LogTest
Signal	port/port_android.cc	/^void CondVar::Signal(){$/;"	f	class:leveldb::port::CondVar
Signal	port/port_chromium.cc	/^void CondVar::Signal(){$/;"	f	class:leveldb::port::CondVar
Signal	port/port_posix.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
SignalAll	port/port_android.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignalAll	port/port_chromium.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignalAll	port/port_posix.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
Size	db/db_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Size	table/table_test.cc	/^  uint64_t Size() const { return contents_.size(); }$/;"	f	class:leveldb::StringSource
Skewed	util/random.h	/^  uint32_t Skewed(int max_log) {$/;"	f	class:leveldb::Random
SkipEmptyDataBlocksBackward	table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
SkipEmptyDataBlocksForward	table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
SkipList	db/skiplist.h	/^SkipList<Key,Comparator>::SkipList(Comparator cmp, Arena* arena)$/;"	f	class:leveldb::SkipList
SkipList	db/skiplist.h	/^class SkipList {$/;"	c	namespace:leveldb
SkipTest	db/skiplist_test.cc	/^class SkipTest { };$/;"	c	namespace:leveldb	file:
SleepForMicroseconds	include/leveldb/env.h	/^  void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::EnvWrapper
SleepForMicroseconds	util/env_chromium.cc	/^  virtual void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
SleepForMicroseconds	util/env_posix.cc	/^  virtual void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::__anon17::PosixEnv
Slice	include/leveldb/slice.h	/^  Slice() : data_(""), size_(0) { }$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^  Slice(const char* data, size_t n) : data_(data), size_(n) { }$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) { }$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) { }$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^class Slice {$/;"	c	namespace:leveldb
SnappyCompress	db/db_bench.cc	/^  void SnappyCompress() {$/;"	f	class:leveldb::Benchmark	file:
SnappyCompressionSupported	table/table_test.cc	/^static bool SnappyCompressionSupported() {$/;"	f	namespace:leveldb
SnappyUncompress	db/db_bench.cc	/^  void SnappyUncompress() {$/;"	f	class:leveldb::Benchmark	file:
Snappy_Compress	port/port_android.h	/^inline bool Snappy_Compress($/;"	f	namespace:leveldb::port
Snappy_Compress	port/port_chromium.cc	/^bool Snappy_Compress(const char* input, size_t input_length,$/;"	f	namespace:leveldb::port
Snappy_Compress	port/port_posix.h	/^inline bool Snappy_Compress(const char* input, size_t input_length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	port/port_android.h	/^inline bool Snappy_Uncompress($/;"	f	namespace:leveldb::port
Snappy_Uncompress	port/port_chromium.cc	/^bool Snappy_Uncompress(const char* input_data, size_t input_length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	port/port_posix.h	/^inline bool Snappy_Uncompress(const char* input_data, size_t input_length,$/;"	f	namespace:leveldb::port
Snapshot	db/snapshot.h	/^class Snapshot {$/;"	c	namespace:leveldb
SnapshotList	db/snapshot.h	/^  SnapshotList() {$/;"	f	class:leveldb::SnapshotList
SnapshotList	db/snapshot.h	/^class SnapshotList {$/;"	c	namespace:leveldb
SortLevel	db/version_set.cc	/^Status VersionSet::SortLevel(Version* v, uint64_t level) {$/;"	f	class:leveldb::VersionSet
StandardDeviation	util/histogram.cc	/^double Histogram::StandardDeviation() const {$/;"	f	class:leveldb::Histogram
Start	db/db_bench.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
StartThread	include/leveldb/env.h	/^  void StartThread(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
StartThread	util/env_chromium.cc	/^void ChromiumEnv::StartThread(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
StartThread	util/env_posix.cc	/^void PosixEnv::StartThread(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon17::PosixEnv
StartThreadState	util/env_posix.cc	/^struct StartThreadState {$/;"	s	namespace:leveldb::__anon17::__anon18	file:
StartThreadWrapper	util/env_posix.cc	/^static void* StartThreadWrapper(void* arg) {$/;"	f	namespace:leveldb::__anon17
State	db/skiplist_test.cc	/^    State() {$/;"	f	struct:leveldb::ConcurrentTest::State
State	db/skiplist_test.cc	/^  struct State {$/;"	s	class:leveldb::ConcurrentTest	file:
State	include/leveldb/status.h	/^  typedef std::pair<Code, std::string> State;$/;"	t	class:leveldb::Status
State	util/env_test.cc	/^struct State {$/;"	s	namespace:leveldb	file:
Status	include/leveldb/status.h	/^  Status() : state_(NULL) { }$/;"	f	class:leveldb::Status
Status	include/leveldb/status.h	/^class Status {$/;"	c	namespace:leveldb
Status	include/leveldb/status.h	/^inline Status::Status(const Status& s) {$/;"	f	class:leveldb::Status
Status	util/status.cc	/^Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:leveldb::Status
Stop	db/db_bench.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
StringDest	db/log_test.cc	/^  class StringDest : public WritableFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSink	table/table_test.cc	/^class StringSink: public WritableFile {$/;"	c	namespace:leveldb	file:
StringSource	db/log_test.cc	/^    StringSource() : force_error_(false), returned_partial_(false) { }$/;"	f	class:leveldb::log::LogTest::StringSource
StringSource	db/log_test.cc	/^  class StringSource : public SequentialFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSource	table/table_test.cc	/^  StringSource(const Slice& contents)$/;"	f	class:leveldb::StringSource
StringSource	table/table_test.cc	/^class StringSource: public RandomAccessFile {$/;"	c	namespace:leveldb	file:
Sync	db/db_impl.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon1::NullWritableFile
Sync	db/log_test.cc	/^    virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Sync	table/table_test.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Sync	util/env_chromium.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon20::ChromiumWritableFile
Sync	util/env_posix.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon17::PosixMmapFile
TABLE_TEST	table/table_test.cc	/^  TABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
TCONCAT	util/testharness.h	105;"	d
TCONCAT1	util/testharness.h	106;"	d
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputError) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputErrorParanoid) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, CorruptedDescriptor) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, MissingDescriptor) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, NewFileErrorDuringWrite) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, RecoverWriteError) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, Recovery) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, SequenceNumberRecovery) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, TableFile) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, TableFileIndexData) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, UnrelatedKeys) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ApproximateSizes) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, CompactionsGenerateMultipleFiles) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ComparatorCheck) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DBOpen_Options) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DeletionMarkers1) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DeletionMarkers2) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, HiddenValuesAreRemoved) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterEmpty) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterMulti) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterSingle) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterSmallAndLargeMix) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IteratorPinsRef) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, MinorCompactionsHappen) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, PutDeleteGet) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Randomized) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Recover) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, RecoverWithLargeLog) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, RecoveryWithEmptyLog) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Snapshot) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, SparseMerge) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortSeparator) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortestSuccessor) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKey_EncodeDecode) {$/;"	f	namespace:leveldb
TEST	db/filename_test.cc	/^TEST(FileNameTest, Construction) {$/;"	f	namespace:leveldb
TEST	db/filename_test.cc	/^TEST(FileNameTest, Parse) {$/;"	f	namespace:leveldb
TEST	db/log_test.cc	/^TEST(LogTest, AlignedEof) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, BadLength) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, BadRecordType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ChecksumMismatch) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, Empty) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ErrorJoinsRecords) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, Fragmentation) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ManyBlocks) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, MarginalTrailer) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, RandomRead) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadError) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadWrite) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ShortTrailer) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, TruncatedTrailingRecord) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedFirstType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedFullType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedLastType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedMiddleType) {$/;"	f	namespace:leveldb::log
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent1) { RunConcurrent(1); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent2) { RunConcurrent(2); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent3) { RunConcurrent(3); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent4) { RunConcurrent(4); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent5) { RunConcurrent(5); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, ConcurrentWithoutThreads) {$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, InsertAndLookup) {$/;"	f	namespace:leveldb
TEST	db/version_edit_test.cc	/^TEST(VersionEditTest, EncodeDecode) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Corruption) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Multiple) {$/;"	f	namespace:leveldb
TEST	port/sha1_test.cc	/^TEST(SHA1, Simple) {$/;"	f	namespace:leveldb::port
TEST	table/table_test.cc	/^TEST(Harness, Randomized) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, RandomizedLongDB) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleEmptyKey) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleMulti) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleSingle) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleSpecialKey) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(MemTableTest, Simple) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfCompressed) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfPlain) {$/;"	f	namespace:leveldb
TEST	util/arena_test.cc	/^TEST(ArenaTest, Empty) {$/;"	f	namespace:leveldb
TEST	util/arena_test.cc	/^TEST(ArenaTest, Simple) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, EntriesArePinned) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, Erase) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, EvictionPolicy) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, HeavyEntry) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, HitAndMiss) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, NewId) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Fixed32) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Fixed64) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Strings) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint32) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint32Overflow) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint32Truncation) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint64) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint64Overflow) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint64Truncation) {$/;"	f	namespace:leveldb
TEST	util/crc32c_test.cc	/^TEST(CRC, Extend) {$/;"	f	namespace:leveldb::crc32c
TEST	util/crc32c_test.cc	/^TEST(CRC, Mask) {$/;"	f	namespace:leveldb::crc32c
TEST	util/crc32c_test.cc	/^TEST(CRC, StandardResults) {$/;"	f	namespace:leveldb::crc32c
TEST	util/crc32c_test.cc	/^TEST(CRC, Values) {$/;"	f	namespace:leveldb::crc32c
TEST	util/env_test.cc	/^TEST(EnvPosixTest, RunImmediately) {$/;"	f	namespace:leveldb
TEST	util/env_test.cc	/^TEST(EnvPosixTest, RunMany) {$/;"	f	namespace:leveldb
TEST	util/env_test.cc	/^TEST(EnvPosixTest, StartThread) {$/;"	f	namespace:leveldb
TEST	util/testharness.h	108;"	d
TESTHARNESS	Makefile	/^TESTHARNESS = .\/util\/testharness.o $(TESTUTIL)$/;"	m
TESTS	Makefile	/^TESTS = \\$/;"	m
TESTUTIL	Makefile	/^TESTUTIL = .\/util\/testutil.o$/;"	m
TEST_CompactMemTable	db/db_impl.cc	/^Status DBImpl::TEST_CompactMemTable() {$/;"	f	class:leveldb::DBImpl
TEST_CompactRange	db/db_impl.cc	/^void DBImpl::TEST_CompactRange($/;"	f	class:leveldb::DBImpl
TEST_MaxNextLevelOverlappingBytes	db/db_impl.cc	/^int64_t DBImpl::TEST_MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::DBImpl
TEST_NewInternalIterator	db/db_impl.cc	/^Iterator* DBImpl::TEST_NewInternalIterator() {$/;"	f	class:leveldb::DBImpl
Table	db/memtable.h	/^  typedef SkipList<const char*, KeyComparator> Table;$/;"	t	class:leveldb::MemTable
Table	include/leveldb/table.h	/^  explicit Table(Rep* rep) { rep_ = rep; }$/;"	f	class:leveldb::Table
Table	include/leveldb/table.h	/^class Table {$/;"	c	namespace:leveldb
TableAndFile	db/table_cache.cc	/^struct TableAndFile {$/;"	s	namespace:leveldb	file:
TableBuilder	include/leveldb/table_builder.h	/^class TableBuilder {$/;"	c	namespace:leveldb
TableBuilder	table/table_builder.cc	/^TableBuilder::TableBuilder(const Options& options, WritableFile* file)$/;"	f	class:leveldb::TableBuilder
TableCache	db/table_cache.cc	/^TableCache::TableCache(const std::string& dbname,$/;"	f	class:leveldb::TableCache
TableCache	db/table_cache.h	/^class TableCache {$/;"	c	namespace:leveldb
TableConstructor	table/table_test.cc	/^  TableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::TableConstructor
TableConstructor	table/table_test.cc	/^class TableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
TableFileName	db/filename.cc	/^std::string TableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
TableInfo	db/repair.cc	/^  struct TableInfo {$/;"	s	class:leveldb::__anon3::Repairer	file:
TableTest	table/table_test.cc	/^class TableTest { };$/;"	c	namespace:leveldb	file:
Tag	db/version_edit.cc	/^enum Tag {$/;"	g	namespace:leveldb	file:
TempFileName	db/filename.cc	/^std::string TempFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
Test	table/table_test.cc	/^  void Test(Random* rnd) {$/;"	f	class:leveldb::Harness
Test	util/testharness.cc	/^struct Test {$/;"	s	namespace:leveldb::test::__anon16	file:
TestArgs	table/table_test.cc	/^struct TestArgs {$/;"	s	namespace:leveldb	file:
TestBackwardScan	table/table_test.cc	/^  void TestBackwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestEncodeDecode	db/version_edit_test.cc	/^static void TestEncodeDecode(const VersionEdit& edit) {$/;"	f	namespace:leveldb
TestForwardScan	table/table_test.cc	/^  void TestForwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestKey	db/dbformat_test.cc	/^static void TestKey(const std::string& key,$/;"	f	namespace:leveldb
TestRandomAccess	table/table_test.cc	/^  void TestRandomAccess(Random* rnd,$/;"	f	class:leveldb::Harness
TestSHA1	port/sha1_test.cc	/^static std::string TestSHA1(const char* data, size_t len) {$/;"	f	namespace:leveldb::port
TestState	db/skiplist_test.cc	/^  explicit TestState(int s)$/;"	f	class:leveldb::TestState
TestState	db/skiplist_test.cc	/^class TestState {$/;"	c	namespace:leveldb	file:
TestType	table/table_test.cc	/^enum TestType {$/;"	g	namespace:leveldb	file:
Tester	util/testharness.h	/^  Tester(const char* f, int l)$/;"	f	class:leveldb::test::Tester
Tester	util/testharness.h	/^class Tester {$/;"	c	namespace:leveldb::test
Thread	util/env_chromium.cc	/^  Thread(void (*function)(void* arg), void* arg)$/;"	f	class:leveldb::__anon20::Thread
Thread	util/env_chromium.cc	/^class Thread : public ::base::PlatformThread::Delegate {$/;"	c	namespace:leveldb::__anon20	file:
ThreadBody	util/env_test.cc	/^static void ThreadBody(void* arg) {$/;"	f	namespace:leveldb
ThreadIdentifier	port/port_android.h	/^inline uint64_t ThreadIdentifier() {$/;"	f	namespace:leveldb::port
ThreadMain	util/env_chromium.cc	/^  virtual void ThreadMain() {$/;"	f	class:leveldb::__anon20::Thread
TmpDir	util/testharness.cc	/^std::string TmpDir() {$/;"	f	namespace:leveldb::test
ToString	include/leveldb/slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	class:leveldb::Slice
ToString	table/table_test.cc	/^  std::string ToString(const Iterator* it) {$/;"	f	class:leveldb::Harness
ToString	table/table_test.cc	/^  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {$/;"	f	class:leveldb::Harness
ToString	table/table_test.cc	/^  std::string ToString(const KVMap& data,$/;"	f	class:leveldb::Harness
ToString	util/histogram.cc	/^std::string Histogram::ToString() const {$/;"	f	class:leveldb::Histogram
ToString	util/status.cc	/^std::string Status::ToString() const {$/;"	f	class:leveldb::Status
TotalFileSize	db/version_set.cc	/^static int64_t TotalFileSize(const std::vector<FileMetaData*>& files) {$/;"	f	namespace:leveldb
TrimSpace	db/db_bench.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon7
TruncateToPageBoundary	util/env_posix.cc	/^  size_t TruncateToPageBoundary(size_t s) {$/;"	f	class:leveldb::__anon17::PosixMmapFile	file:
TryReopen	db/corruption_test.cc	/^  Status TryReopen(Options* options = NULL) {$/;"	f	class:leveldb::CorruptionTest
TryReopen	db/db_test.cc	/^  Status TryReopen(Options* options) {$/;"	f	class:leveldb::DBTest
TwoLevelIterator	table/two_level_iterator.cc	/^TwoLevelIterator::TwoLevelIterator($/;"	f	class:leveldb::__anon8::TwoLevelIterator
TwoLevelIterator	table/two_level_iterator.cc	/^class TwoLevelIterator: public Iterator {$/;"	c	namespace:leveldb::__anon8	file:
Uniform	util/random.h	/^  uint32_t Uniform(int n) { return Next() % n; }$/;"	f	class:leveldb::Random
Unlock	port/port_android.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Unlock	port/port_chromium.cc	/^void Mutex::Unlock() {$/;"	f	class:leveldb::port::Mutex
Unlock	port/port_posix.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
UnlockFile	include/leveldb/env.h	/^  Status UnlockFile(FileLock* l) { return target_->UnlockFile(l); }$/;"	f	class:leveldb::EnvWrapper
UnlockFile	util/env_chromium.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon20::ChromiumEnv
UnlockFile	util/env_posix.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon17::PosixEnv
UnmapCurrentRegion	util/env_posix.cc	/^  void UnmapCurrentRegion() {$/;"	f	class:leveldb::__anon17::PosixMmapFile	file:
Unmask	util/crc32c.h	/^inline uint32_t Unmask(uint32_t masked_crc) {$/;"	f	namespace:leveldb::crc32c
Unref	db/db_impl.cc	/^void DBImpl::Unref(void* arg1, void* arg2) {$/;"	f	class:leveldb::DBImpl
Unref	db/version_set.cc	/^void Version::Unref() {$/;"	f	class:leveldb::Version
Unref	util/cache.cc	/^void LRUCache::Unref(LRUHandle* e) {$/;"	f	class:leveldb::__anon22::LRUCache
UnrefEntry	db/table_cache.cc	/^static void UnrefEntry(void* arg1, void* arg2) {$/;"	f	namespace:leveldb
Update	table/iterator_wrapper.h	/^  void Update() {$/;"	f	class:leveldb::IteratorWrapper
UserIdentifier	util/env_chromium.cc	/^  virtual std::string UserIdentifier() {$/;"	f	class:leveldb::__anon20::ChromiumEnv
Valid	db/db_iter.cc	/^  virtual bool Valid() const { return valid_; }$/;"	f	class:leveldb::__anon5::DBIter
Valid	db/db_test.cc	/^    virtual bool Valid() const { return iter_ != map_->end(); }$/;"	f	class:leveldb::ModelDB::ModelIter
Valid	db/memtable.cc	/^  virtual bool Valid() const { return iter_->Valid(); }$/;"	f	class:leveldb::MemTableIterator
Valid	db/skiplist.h	/^inline bool SkipList<Key,Comparator>::Iterator::Valid() const {$/;"	f	class:leveldb::SkipList::Iterator
Valid	db/version_set.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Valid	table/block.cc	/^  virtual bool Valid() const { return current_ < restarts_; }$/;"	f	class:leveldb::Block::Iter
Valid	table/iterator.cc	/^  virtual bool Valid() const { return false; }$/;"	f	class:leveldb::__anon13::EmptyIterator
Valid	table/iterator_wrapper.h	/^  bool Valid() const { return valid_; }$/;"	f	class:leveldb::IteratorWrapper
Valid	table/merger.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon14::MergingIterator
Valid	table/table_test.cc	/^  virtual bool Valid() const { return iter_->Valid(); }$/;"	f	class:leveldb::KeyConvertingIterator
Valid	table/two_level_iterator.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
Value	db/corruption_test.cc	/^  Slice Value(int k, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Value	util/cache.cc	/^void* LRUCache::Value(Handle* handle) {$/;"	f	class:leveldb::__anon22::LRUCache
Value	util/crc32c.h	/^inline uint32_t Value(const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ValueType	db/dbformat.h	/^enum ValueType {$/;"	g	namespace:leveldb
VarintLength	util/coding.cc	/^int VarintLength(uint64_t v) {$/;"	f	namespace:leveldb
Version	db/version_set.h	/^  explicit Version(VersionSet* vset)$/;"	f	class:leveldb::Version
Version	db/version_set.h	/^class Version {$/;"	c	namespace:leveldb
VersionEdit	db/version_edit.h	/^  VersionEdit() { Clear(); }$/;"	f	class:leveldb::VersionEdit
VersionEdit	db/version_edit.h	/^class VersionEdit {$/;"	c	namespace:leveldb
VersionEditTest	db/version_edit_test.cc	/^class VersionEditTest { };$/;"	c	namespace:leveldb	file:
VersionSet	db/version_set.cc	/^VersionSet::VersionSet(const std::string& dbname,$/;"	f	class:leveldb::VersionSet
VersionSet	db/version_set.h	/^class VersionSet {$/;"	c	namespace:leveldb
Wait	db/skiplist_test.cc	/^  void Wait(ReaderState s) {$/;"	f	class:leveldb::TestState
Wait	port/port_android.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
Wait	port/port_chromium.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
Wait	port/port_posix.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
WritableFile	include/leveldb/env.h	/^  WritableFile() { }$/;"	f	class:leveldb::WritableFile
WritableFile	include/leveldb/env.h	/^class WritableFile {$/;"	c	namespace:leveldb
Write	db/db_bench.cc	/^  void Write(const WriteOptions& options, Order order, DBState state,$/;"	f	class:leveldb::Benchmark	file:
Write	db/db_impl.cc	/^Status DBImpl::Write(const WriteOptions& options, WriteBatch* updates) {$/;"	f	class:leveldb::DBImpl
Write	db/db_test.cc	/^  virtual Status Write(const WriteOptions& options, WriteBatch* batch) {$/;"	f	class:leveldb::ModelDB
Write	db/log_test.cc	/^  void Write(const std::string& msg) {$/;"	f	class:leveldb::log::LogTest
WriteBatch	db/write_batch.cc	/^WriteBatch::WriteBatch() {$/;"	f	class:leveldb::WriteBatch
WriteBatch	include/leveldb/write_batch.h	/^class WriteBatch {$/;"	c	namespace:leveldb
WriteBatchInternal	db/write_batch_internal.h	/^class WriteBatchInternal {$/;"	c	namespace:leveldb
WriteBatchTest	db/write_batch_test.cc	/^class WriteBatchTest { };$/;"	c	namespace:leveldb	file:
WriteBlock	table/table_builder.cc	/^void TableBuilder::WriteBlock(BlockBuilder* block, BlockHandle* handle) {$/;"	f	class:leveldb::TableBuilder
WriteDescriptor	db/repair.cc	/^  Status WriteDescriptor() {$/;"	f	class:leveldb::__anon3::Repairer	file:
WriteLevel0Table	db/db_impl.cc	/^Status DBImpl::WriteLevel0Table(MemTable* mem, VersionEdit* edit) {$/;"	f	class:leveldb::DBImpl
WriteOptions	include/leveldb/options.h	/^  WriteOptions()$/;"	f	struct:leveldb::WriteOptions
WriteOptions	include/leveldb/options.h	/^struct WriteOptions {$/;"	s	namespace:leveldb
WriteSnapshot	db/version_set.cc	/^Status VersionSet::WriteSnapshot(log::Writer* log) {$/;"	f	class:leveldb::VersionSet
WriteStep	db/skiplist_test.cc	/^  void WriteStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
WriteStringToFile	util/env.cc	/^Status WriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteToFile	db/db_bench.cc	/^  static void WriteToFile(void* arg, const char* buf, int n) {$/;"	f	class:leveldb::Benchmark	file:
Writer	db/log_writer.cc	/^Writer::Writer(WritableFile* dest)$/;"	f	class:leveldb::log::Writer
Writer	db/log_writer.h	/^class Writer {$/;"	c	namespace:leveldb::log
WrittenBytes	db/log_test.cc	/^  size_t WrittenBytes() const {$/;"	f	class:leveldb::log::LogTest
alloc_bytes_remaining_	util/arena.h	/^  size_t alloc_bytes_remaining_;$/;"	m	class:leveldb::Arena
alloc_ptr_	util/arena.h	/^  char* alloc_ptr_;$/;"	m	class:leveldb::Arena
arena_	db/memtable.h	/^  Arena arena_;$/;"	m	class:leveldb::MemTable
arena_	db/skiplist.h	/^  Arena* const arena_;    \/\/ Arena used for allocations of nodes$/;"	m	class:leveldb::SkipList
arena_	db/skiplist_test.cc	/^  Arena arena_;$/;"	m	class:leveldb::ConcurrentTest	file:
arg	util/env_chromium.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon20::ChromiumEnv::BGItem	file:
arg	util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon17::PosixEnv::BGItem	file:
arg	util/env_posix.cc	/^  void* arg;$/;"	m	struct:leveldb::__anon17::__anon18::StartThreadState	file:
arg1	include/leveldb/iterator.h	/^    void* arg1;$/;"	m	struct:leveldb::Iterator::Cleanup
arg2	include/leveldb/iterator.h	/^    void* arg2;$/;"	m	struct:leveldb::Iterator::Cleanup
arg_	table/two_level_iterator.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon8::TwoLevelIterator	file:
arg_	util/env_chromium.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon20::Thread	file:
backing_store_	db/log_reader.h	/^  char* const backing_store_;$/;"	m	class:leveldb::log::Reader
base	util/testharness.cc	/^  const char* base;$/;"	m	struct:leveldb::test::__anon16::Test	file:
base_	util/env_posix.cc	/^  char* base_;            \/\/ The mapped region$/;"	m	class:leveldb::__anon17::PosixMmapFile	file:
bg_compaction_scheduled_	db/db_impl.h	/^  bool bg_compaction_scheduled_;$/;"	m	class:leveldb::DBImpl
bg_cv_	db/db_impl.h	/^  port::CondVar bg_cv_;          \/\/ Signalled when !bg_compaction_scheduled_$/;"	m	class:leveldb::DBImpl
bg_error_	db/db_impl.h	/^  Status bg_error_;$/;"	m	class:leveldb::DBImpl
bgsignal_	util/env_chromium.cc	/^  ::base::ConditionVariable bgsignal_;$/;"	m	class:leveldb::__anon20::ChromiumEnv	file:
bgsignal_	util/env_posix.cc	/^  pthread_cond_t bgsignal_;$/;"	m	class:leveldb::__anon17::PosixEnv	file:
bgthread_	util/env_posix.cc	/^  pthread_t bgthread_;$/;"	m	class:leveldb::__anon17::PosixEnv	file:
block_	table/table_test.cc	/^  Block* block_;$/;"	m	class:leveldb::BlockConstructor	file:
block_cache	include/leveldb/options.h	/^  Cache* block_cache;$/;"	m	struct:leveldb::Options
block_function_	table/two_level_iterator.cc	/^  BlockFunction block_function_;$/;"	m	class:leveldb::__anon8::TwoLevelIterator	file:
block_offset_	db/log_writer.h	/^  int block_offset_;       \/\/ Current offset in block$/;"	m	class:leveldb::log::Writer
block_restart_interval	include/leveldb/options.h	/^  int block_restart_interval;$/;"	m	struct:leveldb::Options
block_size	include/leveldb/options.h	/^  size_t block_size;$/;"	m	struct:leveldb::Options
block_size_	table/table_test.cc	/^  int block_size_;$/;"	m	class:leveldb::BlockConstructor	file:
blocks_	util/arena.h	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::Arena
blocks_memory_	util/arena.h	/^  size_t blocks_memory_;$/;"	m	class:leveldb::Arena
buckets_	util/histogram.h	/^  double buckets_[kNumBuckets];$/;"	m	class:leveldb::Histogram
buffer_	db/log_reader.h	/^  Slice buffer_;$/;"	m	class:leveldb::log::Reader
buffer_	table/block_builder.h	/^  std::string           buffer_;      \/\/ Destination buffer$/;"	m	class:leveldb::BlockBuilder
builder	db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
bytes_	db/db_bench.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_read	db/db_impl.h	/^    int64_t bytes_read;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytes_written	db/db_impl.h	/^    int64_t bytes_written;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytewise	util/comparator.cc	/^static const BytewiseComparatorImpl bytewise;$/;"	m	namespace:leveldb	file:
cache_	db/db_bench.cc	/^  Cache* cache_;$/;"	m	class:leveldb::Benchmark	file:
cache_	db/table_cache.h	/^  Cache* cache_;$/;"	m	class:leveldb::TableCache
cache_	util/cache_test.cc	/^  Cache* cache_;$/;"	m	class:leveldb::CacheTest	file:
cache_id	table/table.cc	/^  uint64_t cache_id;$/;"	m	struct:leveldb::Table::Rep	file:
capacity_	util/cache.cc	/^  const size_t capacity_;$/;"	m	class:leveldb::__anon22::LRUCache	file:
charge	util/cache.cc	/^  size_t charge;      \/\/ TODO(opt): Only allow uint32_t?$/;"	m	struct:leveldb::__anon22::LRUHandle	file:
checksum_	db/log_reader.h	/^  bool const checksum_;$/;"	m	class:leveldb::log::Reader
children_	table/merger.cc	/^  IteratorWrapper* children_;$/;"	m	class:leveldb::__anon14::MergingIterator	file:
cleanup_	include/leveldb/iterator.h	/^  Cleanup cleanup_;$/;"	m	class:leveldb::Iterator
cleanup_mem_	db/version_set.h	/^  MemTable* cleanup_mem_;       \/\/ NULL, or table to delete when version dropped$/;"	m	class:leveldb::Version
clear	include/leveldb/slice.h	/^  void clear() { data_ = ""; size_ = 0; }$/;"	f	class:leveldb::Slice
closed	table/table_builder.cc	/^  bool closed;          \/\/ Either Finish() or Abandon() has been called.$/;"	m	struct:leveldb::TableBuilder::Rep	file:
cmp	table/table_test.cc	/^  const Comparator* cmp;$/;"	m	struct:leveldb::__anon10::STLLessThan	file:
code	include/leveldb/status.h	/^  Code code() const { return (state_ == NULL) ? kOk : state_->first; }$/;"	f	class:leveldb::Status
compact_pointer_	db/version_set.h	/^  std::string compact_pointer_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet
compact_pointers_	db/version_edit.h	/^  std::vector< std::pair<int, InternalKey> > compact_pointers_;$/;"	m	class:leveldb::VersionEdit
compacting_	db/db_impl.h	/^  bool compacting_;$/;"	m	class:leveldb::DBImpl
compacting_cv_	db/db_impl.h	/^  port::CondVar compacting_cv_;  \/\/ Signalled when !compacting_$/;"	m	class:leveldb::DBImpl
compaction	db/db_impl.cc	/^  Compaction* const compaction;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
compaction_level_	db/version_set.h	/^  int compaction_level_;$/;"	m	class:leveldb::Version
compaction_score_	db/version_set.h	/^  double compaction_score_;$/;"	m	class:leveldb::Version
comparator	db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyComparator
comparator	include/leveldb/options.h	/^  const Comparator* comparator;$/;"	m	struct:leveldb::Options
comparator_	db/memtable.h	/^  KeyComparator comparator_;$/;"	m	class:leveldb::MemTable
comparator_	db/version_edit.h	/^  std::string comparator_;$/;"	m	class:leveldb::VersionEdit
comparator_	table/block.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::Block::Iter	file:
comparator_	table/merger.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::__anon14::MergingIterator	file:
comparator_	table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::BlockConstructor	file:
comparator_	table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::DBConstructor	file:
compare	include/leveldb/slice.h	/^inline int Slice::compare(const Slice& b) const {$/;"	f	class:leveldb::Slice
compare_	db/skiplist.h	/^  Comparator const compare_;$/;"	m	class:leveldb::SkipList
compressed_output	table/table_builder.cc	/^  std::string compressed_output;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
compression	include/leveldb/options.h	/^  CompressionType compression;$/;"	m	struct:leveldb::Options
config	db/dbformat.h	/^namespace config {$/;"	n	namespace:leveldb
constructor_	table/table_test.cc	/^  Constructor* constructor_;$/;"	m	class:leveldb::Harness	file:
contents	table/table_test.cc	/^  const std::string& contents() const { return contents_; }$/;"	f	class:leveldb::StringSink
contents_	db/log_test.cc	/^    Slice contents_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
contents_	db/log_test.cc	/^    std::string contents_;$/;"	m	class:leveldb::log::LogTest::StringDest	file:
contents_	table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSink	file:
contents_	table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSource	file:
counter_	table/block_builder.h	/^  int                   counter_;     \/\/ Number of entries emitted since restart$/;"	m	class:leveldb::BlockBuilder
crc32c	util/crc32c.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
crc32c	util/crc32c.h	/^namespace crc32c {$/;"	n	namespace:leveldb
crc32c	util/crc32c_test.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
create_if_missing	include/leveldb/options.h	/^  bool create_if_missing;$/;"	m	struct:leveldb::Options
current	db/version_set.h	/^  Version* current() const { return current_; }$/;"	f	class:leveldb::VersionSet
current_	db/skiplist_test.cc	/^  State current_;$/;"	m	class:leveldb::ConcurrentTest	file:
current_	db/version_set.h	/^  Version* current_;    \/\/ Pointer to the last (newest) list entry$/;"	m	class:leveldb::VersionSet
current_	table/block.cc	/^  uint32_t current_;$/;"	m	class:leveldb::Block::Iter	file:
current_	table/merger.cc	/^  IteratorWrapper* current_;$/;"	m	class:leveldb::__anon14::MergingIterator	file:
current_	util/cache_test.cc	/^  static CacheTest* current_;$/;"	m	class:leveldb::CacheTest	file:
current_	util/cache_test.cc	/^CacheTest* CacheTest::current_;$/;"	m	class:leveldb::CacheTest	file:
current_output	db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size()-1]; }$/;"	f	struct:leveldb::DBImpl::CompactionState
cv_	port/port_android.h	/^  pthread_cond_t cv_;$/;"	m	class:leveldb::port::CondVar
cv_	port/port_chromium.h	/^  base::ConditionVariable cv_;$/;"	m	class:leveldb::port::CondVar
cv_	port/port_posix.h	/^  pthread_cond_t cv_;$/;"	m	class:leveldb::port::CondVar
data	include/leveldb/slice.h	/^  const char* data() const { return data_; }$/;"	f	class:leveldb::Slice
data	table/table_test.cc	/^  virtual const KVMap& data() { return data_; }$/;"	f	class:leveldb::Constructor
data_	db/db_bench.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon7::RandomGenerator	file:
data_	include/leveldb/slice.h	/^  const char* data_;$/;"	m	class:leveldb::Slice
data_	table/block.cc	/^  const char* const data_;      \/\/ underlying block contents$/;"	m	class:leveldb::Block::Iter	file:
data_	table/block.h	/^  const char* data_;$/;"	m	class:leveldb::Block
data_	table/table_test.cc	/^  KVMap data_;$/;"	m	class:leveldb::Constructor	file:
data_block	table/table_builder.cc	/^  BlockBuilder data_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
data_block_handle_	table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon8::TwoLevelIterator	file:
data_iter_	table/two_level_iterator.cc	/^  IteratorWrapper data_iter_; \/\/ May be NULL$/;"	m	class:leveldb::__anon8::TwoLevelIterator	file:
db	table/table_test.cc	/^  DB* db() const { return constructor_->db(); }$/;"	f	class:leveldb::Harness
db	table/table_test.cc	/^  virtual DB* db() const { return NULL; }  \/\/ Overridden in DBConstructor$/;"	f	class:leveldb::Constructor
db	table/table_test.cc	/^  virtual DB* db() const { return db_; }$/;"	f	class:leveldb::DBConstructor
db_	db/corruption_test.cc	/^  DB* db_;$/;"	m	class:leveldb::CorruptionTest	file:
db_	db/db_bench.cc	/^  DB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	db/db_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBTest	file:
db_	table/table_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBConstructor	file:
db_lock_	db/db_impl.h	/^  FileLock* db_lock_;$/;"	m	class:leveldb::DBImpl
dbfull	db/db_test.cc	/^  DBImpl* dbfull() {$/;"	f	class:leveldb::DBTest
dbname_	db/corruption_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::CorruptionTest	file:
dbname_	db/db_impl.h	/^  const std::string dbname_;$/;"	m	class:leveldb::DBImpl
dbname_	db/db_iter.cc	/^  const std::string* const dbname_;$/;"	m	class:leveldb::__anon5::DBIter::std	file:
dbname_	db/db_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::DBTest	file:
dbname_	db/repair.cc	/^  std::string const dbname_;$/;"	m	class:leveldb::__anon3::Repairer::std	file:
dbname_	db/table_cache.h	/^  const std::string dbname_;$/;"	m	class:leveldb::TableCache
dbname_	db/version_set.h	/^  const std::string dbname_;$/;"	m	class:leveldb::VersionSet
default_env	util/env_posix.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
deleted_files_	db/version_edit.h	/^  DeletedFileSet deleted_files_;$/;"	m	class:leveldb::VersionEdit
deleted_keys_	util/cache_test.cc	/^  std::vector<int> deleted_keys_;$/;"	m	class:leveldb::CacheTest	file:
deleted_values_	util/cache_test.cc	/^  std::vector<int> deleted_values_;$/;"	m	class:leveldb::CacheTest	file:
deleter	util/cache.cc	/^  void (*deleter)(const Slice&, void* value);$/;"	m	struct:leveldb::__anon22::LRUHandle	file:
descriptor_file_	db/version_set.h	/^  WritableFile* descriptor_file_;$/;"	m	class:leveldb::VersionSet
descriptor_log_	db/version_set.h	/^  log::Writer* descriptor_log_;$/;"	m	class:leveldb::VersionSet
dest_	db/log_test.cc	/^  StringDest dest_;$/;"	m	class:leveldb::log::LogTest	file:
dest_	db/log_writer.h	/^  WritableFile* dest_;$/;"	m	class:leveldb::log::Writer
direction_	db/db_iter.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon5::DBIter	file:
direction_	table/merger.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon14::MergingIterator	file:
done_	db/db_bench.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
done_	db/write_batch_internal.h	/^    bool done_;$/;"	m	class:leveldb::WriteBatchInternal::Iterator
dropped_bytes_	db/log_test.cc	/^    size_t dropped_bytes_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
dst_	util/env_posix.cc	/^  char* dst_;             \/\/ Where to write next  (in range [base_,limit_])$/;"	m	class:leveldb::__anon17::PosixMmapFile	file:
edit	db/version_set.h	/^  VersionEdit* edit() { return &edit_; }$/;"	f	class:leveldb::Compaction
edit_	db/repair.cc	/^  VersionEdit edit_;$/;"	m	class:leveldb::__anon3::Repairer	file:
edit_	db/version_set.h	/^  VersionEdit edit_;$/;"	m	class:leveldb::Compaction
empty	db/snapshot.h	/^  bool empty() const { return list_.next_ == &list_; }$/;"	f	class:leveldb::SnapshotList
empty	include/leveldb/slice.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:leveldb::Slice
empty	table/block_builder.h	/^  bool empty() const {$/;"	f	class:leveldb::BlockBuilder
env	include/leveldb/options.h	/^  Env* env;$/;"	m	struct:leveldb::Options
env_	db/corruption_test.cc	/^  test::ErrorEnv env_;$/;"	m	class:leveldb::CorruptionTest	file:
env_	db/db_impl.h	/^  Env* const env_;$/;"	m	class:leveldb::DBImpl
env_	db/db_iter.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon5::DBIter	file:
env_	db/db_test.cc	/^  Env* env_;$/;"	m	class:leveldb::DBTest	file:
env_	db/repair.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon3::Repairer	file:
env_	db/table_cache.h	/^  Env* const env_;$/;"	m	class:leveldb::TableCache
env_	db/version_set.h	/^  Env* const env_;$/;"	m	class:leveldb::VersionSet
env_	util/env_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvPosixTest	file:
eof_	db/log_reader.h	/^  bool eof_;   \/\/ Last Read() indicated EOF by returning < kBlockSize$/;"	m	class:leveldb::log::Reader
error_if_exists	include/leveldb/options.h	/^  bool error_if_exists;$/;"	m	struct:leveldb::Options
events_	util/env_test.cc	/^  std::string events_;$/;"	m	class:leveldb::EnvPosixTest	file:
fd_	util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon17::PosixFileLock	file:
fd_	util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon17::PosixMmapFile	file:
fd_	util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon17::PosixRandomAccessFile	file:
fdatasync	port/port_android.cc	/^int fdatasync(int fd) {$/;"	f
fdatasync	util/env_chromium.cc	/^int fdatasync(int fildes) {$/;"	f	namespace:__anon19
fflush_unlocked	port/port_android.cc	/^int fflush_unlocked(FILE *f) {$/;"	f
fflush_unlocked	util/env_chromium.cc	/^int fflush_unlocked(FILE *file) {$/;"	f	namespace:__anon19
file	db/table_cache.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::TableAndFile	file:
file	table/table.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::Table::Rep	file:
file	table/table_builder.cc	/^  WritableFile* file;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
file_	db/log_reader.h	/^  SequentialFile* const file_;$/;"	m	class:leveldb::log::Reader
file_	util/env_chromium.cc	/^  ::base::PlatformFile file_;$/;"	m	class:leveldb::__anon20::ChromiumFileLock	file:
file_	util/env_chromium.cc	/^  ::base::PlatformFile file_;$/;"	m	class:leveldb::__anon20::ChromiumRandomAccessFile	file:
file_	util/env_chromium.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon20::ChromiumSequentialFile	file:
file_	util/env_chromium.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon20::ChromiumWritableFile	file:
file_	util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon17::PosixSequentialFile	file:
file_offset_	util/env_posix.cc	/^  uint64_t file_offset_;  \/\/ Offset of base_ in file$/;"	m	class:leveldb::__anon17::PosixMmapFile	file:
file_size	db/db_impl.cc	/^    uint64_t file_size;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
file_size	db/version_edit.h	/^  uint64_t file_size;         \/\/ File size in bytes$/;"	m	struct:leveldb::FileMetaData
filename_	util/env_chromium.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon20::ChromiumRandomAccessFile	file:
filename_	util/env_chromium.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon20::ChromiumSequentialFile	file:
filename_	util/env_chromium.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon20::ChromiumWritableFile	file:
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon17::PosixMmapFile	file:
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon17::PosixRandomAccessFile	file:
filename_	util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon17::PosixSequentialFile	file:
files_	db/version_set.cc	/^  FileMap files_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet::Builder	file:
files_	db/version_set.h	/^  std::vector<FileMetaData*> files_[config::kNumLevels];$/;"	m	class:leveldb::Version
fill_cache	include/leveldb/options.h	/^  bool fill_cache;$/;"	m	struct:leveldb::ReadOptions
finished_	table/block_builder.h	/^  bool                  finished_;    \/\/ Has Finish() been called?$/;"	m	class:leveldb::BlockBuilder
flist_	db/version_set.cc	/^  const std::vector<FileMetaData*>* const flist_;$/;"	m	class:leveldb::Version::LevelFileNumIterator::std	file:
fname_	util/testharness.h	/^  const char* fname_;$/;"	m	class:leveldb::test::Tester
force_error_	db/log_test.cc	/^    bool force_error_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
fread_unlocked	port/port_android.cc	/^size_t fread_unlocked(void *a, size_t b, size_t c, FILE *d) {$/;"	f
fread_unlocked	util/env_chromium.cc	/^size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *file) {$/;"	f	namespace:__anon19
func	util/testharness.cc	/^  void (*func)();$/;"	m	struct:leveldb::test::__anon16::Test	file:
function	include/leveldb/iterator.h	/^    CleanupFunction function;$/;"	m	struct:leveldb::Iterator::Cleanup
function	util/env_chromium.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon20::ChromiumEnv::BGItem	file:
function	util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon17::PosixEnv::BGItem	file:
function_	util/env_chromium.cc	/^  void (*function_)(void* arg);$/;"	m	class:leveldb::__anon20::Thread	file:
fwrite_unlocked	port/port_android.cc	/^size_t fwrite_unlocked(const void *a, size_t b, size_t c, FILE *d) {$/;"	f
fwrite_unlocked	util/env_chromium.cc	/^size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *file) {$/;"	f	namespace:__anon19
gen	db/skiplist_test.cc	/^  static uint64_t gen(Key key) { return (key >> 8) & 0xffffffffu; }$/;"	f	class:leveldb::ConcurrentTest	file:
gen_	db/db_bench.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
generation	db/skiplist_test.cc	/^    port::AtomicPointer generation[K];$/;"	m	struct:leveldb::ConcurrentTest::State	file:
grandparent_index_	db/version_set.h	/^  size_t grandparent_index_;  \/\/ Index in grandparent_starts_$/;"	m	class:leveldb::Compaction
grandparents_	db/version_set.h	/^  std::vector<FileMetaData*> grandparents_;$/;"	m	class:leveldb::Compaction
has_comparator_	db/version_edit.h	/^  bool has_comparator_;$/;"	m	class:leveldb::VersionEdit
has_imm_	db/db_impl.h	/^  port::AtomicPointer has_imm_;  \/\/ So bg thread can detect non-NULL imm_$/;"	m	class:leveldb::DBImpl
has_last_sequence_	db/version_edit.h	/^  bool has_last_sequence_;$/;"	m	class:leveldb::VersionEdit
has_log_number_	db/version_edit.h	/^  bool has_log_number_;$/;"	m	class:leveldb::VersionEdit
has_next_file_number_	db/version_edit.h	/^  bool has_next_file_number_;$/;"	m	class:leveldb::VersionEdit
has_prev_log_number_	db/version_edit.h	/^  bool has_prev_log_number_;$/;"	m	class:leveldb::VersionEdit
hash	db/skiplist_test.cc	/^  static uint64_t hash(Key key) { return key & 0xff; }$/;"	f	class:leveldb::ConcurrentTest	file:
head_	db/skiplist.h	/^  Node* const head_;$/;"	m	class:leveldb::SkipList
heap_counter_	db/db_bench.cc	/^  int heap_counter_;$/;"	m	class:leveldb::Benchmark	file:
hist_	db/db_bench.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
icmp_	db/repair.cc	/^  InternalKeyComparator const icmp_;$/;"	m	class:leveldb::__anon3::Repairer	file:
icmp_	db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
icmp_	db/version_set.h	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::VersionSet
imm_	db/db_impl.h	/^  MemTable* imm_;                \/\/ Memtable being compacted$/;"	m	class:leveldb::DBImpl
index_	db/version_set.cc	/^  uint32_t index_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
index_block	table/table.cc	/^  Block* index_block;$/;"	m	struct:leveldb::Table::Rep	file:
index_block	table/table_builder.cc	/^  BlockBuilder index_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_block_options	table/table_builder.cc	/^  Options index_block_options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_handle	table/format.h	/^  const BlockHandle& index_handle() const {$/;"	f	class:leveldb::Footer
index_handle_	table/format.h	/^  BlockHandle index_handle_;$/;"	m	class:leveldb::Footer
index_iter_	table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon8::TwoLevelIterator	file:
info_log	include/leveldb/options.h	/^  WritableFile* info_log;$/;"	m	struct:leveldb::Options
input	db/version_set.h	/^  FileMetaData* input(int which, int i) const { return inputs_[which][i]; }$/;"	f	class:leveldb::Compaction
input_	db/write_batch_internal.h	/^    Slice input_;$/;"	m	class:leveldb::WriteBatchInternal::Iterator
input_version_	db/version_set.h	/^  Version* input_version_;$/;"	m	class:leveldb::Compaction
inputs_	db/version_set.h	/^  std::vector<FileMetaData*> inputs_[2];      \/\/ The two sets of inputs$/;"	m	class:leveldb::Compaction
int16_t	port/win/stdint.h	/^typedef signed short          int16_t;$/;"	t
int32_t	port/win/stdint.h	/^typedef signed int            int32_t;$/;"	t
int64_t	port/win/stdint.h	/^typedef signed long long      int64_t;$/;"	t
int8_t	port/win/stdint.h	/^typedef signed char           int8_t;$/;"	t
internal_comparator	db/version_set.cc	/^  const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::BySmallestKey	file:
internal_comparator_	db/db_impl.h	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::DBImpl
internal_comparator_	table/table_test.cc	/^  InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::MemTableConstructor	file:
iter	table/iterator_wrapper.h	/^  Iterator* iter() const { return iter_; }$/;"	f	class:leveldb::IteratorWrapper
iter_	db/db_iter.cc	/^  Iterator* const iter_;$/;"	m	class:leveldb::__anon5::DBIter	file:
iter_	db/db_test.cc	/^    KVMap::const_iterator iter_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
iter_	db/memtable.cc	/^  MemTable::Table::Iterator* iter_;$/;"	m	class:leveldb::MemTableIterator	file:
iter_	table/iterator_wrapper.h	/^  Iterator* iter_;$/;"	m	class:leveldb::IteratorWrapper
iter_	table/table_test.cc	/^  Iterator* iter_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
kBadRecord	db/log_reader.h	/^    kBadRecord = kMaxRecordType + 2$/;"	e	enum:leveldb::log::Reader::__anon6
kBlockSize	db/log_format.h	/^static const int kBlockSize = 32768;$/;"	m	namespace:leveldb::log
kBlockSize	util/arena.cc	/^static const int kBlockSize = 4096;$/;"	m	namespace:leveldb	file:
kBlockTrailerSize	table/format.h	/^static const size_t kBlockTrailerSize = 5;$/;"	m	namespace:leveldb
kBucketLimit	util/histogram.cc	/^const double Histogram::kBucketLimit[kNumBuckets] = {$/;"	m	class:leveldb::Histogram	file:
kBucketLimit	util/histogram.h	/^  static const double kBucketLimit[kNumBuckets];$/;"	m	class:leveldb::Histogram
kCacheSize	util/cache_test.cc	/^  static const int kCacheSize = 100;$/;"	m	class:leveldb::CacheTest	file:
kCompactPointer	db/version_edit.cc	/^  kCompactPointer       = 5,$/;"	e	enum:leveldb::Tag	file:
kComparator	db/version_edit.cc	/^  kComparator           = 1,$/;"	e	enum:leveldb::Tag	file:
kCorruption	include/leveldb/status.h	/^    kCorruption = 2,$/;"	e	enum:leveldb::Status::Code
kCurrentFile	db/filename.h	/^  kCurrentFile,$/;"	e	enum:leveldb::FileType
kDBLockFile	db/filename.h	/^  kDBLockFile,$/;"	e	enum:leveldb::FileType
kDelayMicros	util/env_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDeletedFile	db/version_edit.cc	/^  kDeletedFile          = 6,$/;"	e	enum:leveldb::Tag	file:
kDescriptorFile	db/filename.h	/^  kDescriptorFile,$/;"	e	enum:leveldb::FileType
kEncodedLength	table/format.h	/^    kEncodedLength = 2*BlockHandle::kMaxEncodedLength + 8$/;"	e	enum:leveldb::Footer::__anon12
kEof	db/log_reader.h	/^    kEof = kMaxRecordType + 1,$/;"	e	enum:leveldb::log::Reader::__anon6
kFirstType	db/log_format.h	/^  kFirstType = 2,$/;"	e	enum:leveldb::log::RecordType
kForward	db/db_iter.cc	/^    kForward,$/;"	e	enum:leveldb::__anon5::DBIter::Direction	file:
kForward	table/merger.cc	/^    kForward,$/;"	e	enum:leveldb::__anon14::MergingIterator::Direction	file:
kFullType	db/log_format.h	/^  kFullType = 1,$/;"	e	enum:leveldb::log::RecordType
kHeaderSize	db/log_format.h	/^static const int kHeaderSize = 4 + 1 + 2;$/;"	m	namespace:leveldb::log
kIOError	include/leveldb/status.h	/^    kIOError = 5,$/;"	e	enum:leveldb::Status::Code
kInfoLogFile	db/filename.h	/^  kInfoLogFile,  \/\/ Either the current one, or an old one$/;"	e	enum:leveldb::FileType
kInvalidArgument	include/leveldb/status.h	/^    kInvalidArgument = 4,$/;"	e	enum:leveldb::Status::Code
kLastSequence	db/version_edit.cc	/^  kLastSequence         = 4,$/;"	e	enum:leveldb::Tag	file:
kLastType	db/log_format.h	/^  kLastType = 4,$/;"	e	enum:leveldb::log::RecordType
kLevelDBTestDirectoryPrefix	util/env_chromium.cc	/^static const ::FilePath::CharType kLevelDBTestDirectoryPrefix[]$/;"	m	namespace:leveldb::__anon20	file:
kLittleEndian	port/port_android.h	/^static const bool kLittleEndian = __BYTE_ORDER == __LITTLE_ENDIAN;$/;"	m	namespace:leveldb::port
kLittleEndian	port/port_chromium.h	/^static const bool kLittleEndian = true;$/;"	m	namespace:leveldb::port
kLittleEndian	port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	m	namespace:leveldb::port
kLittleEndian	port/port_posix.h	/^static const bool kLittleEndian = (__BYTE_ORDER == __LITTLE_ENDIAN);$/;"	m	namespace:leveldb::port
kLogFile	db/filename.h	/^  kLogFile,$/;"	e	enum:leveldb::FileType
kLogNumber	db/version_edit.cc	/^  kLogNumber            = 2,$/;"	e	enum:leveldb::Tag	file:
kMajorVersion	include/leveldb/db.h	/^static const int kMajorVersion = 1;$/;"	m	namespace:leveldb
kMaskDelta	util/crc32c.h	/^static const uint32_t kMaskDelta = 0xa282ead8ul;$/;"	m	namespace:leveldb::crc32c
kMaxEncodedLength	table/format.h	/^  enum { kMaxEncodedLength = 10 + 10 };$/;"	e	enum:leveldb::BlockHandle::__anon11
kMaxGrandParentOverlapBytes	db/version_set.cc	/^static const int64_t kMaxGrandParentOverlapBytes = 10 * kTargetFileSize;$/;"	m	namespace:leveldb	file:
kMaxHeight	db/skiplist.h	/^  enum { kMaxHeight = 12 };$/;"	e	enum:leveldb::SkipList::__anon2
kMaxRecordType	db/log_format.h	/^static const int kMaxRecordType = kLastType;$/;"	m	namespace:leveldb::log
kMaxSequenceNumber	db/dbformat.h	/^static const SequenceNumber kMaxSequenceNumber =$/;"	m	namespace:leveldb
kMiddleType	db/log_format.h	/^  kMiddleType = 3,$/;"	e	enum:leveldb::log::RecordType
kMinorVersion	include/leveldb/db.h	/^static const int kMinorVersion = 1;$/;"	m	namespace:leveldb
kNewFile	db/version_edit.cc	/^  kNewFile              = 7,$/;"	e	enum:leveldb::Tag	file:
kNextFileNumber	db/version_edit.cc	/^  kNextFileNumber       = 3,$/;"	e	enum:leveldb::Tag	file:
kNoCompression	include/leveldb/options.h	/^  kNoCompression     = 0x0,$/;"	e	enum:leveldb::CompressionType
kNotFound	include/leveldb/status.h	/^    kNotFound = 1,$/;"	e	enum:leveldb::Status::Code
kNotSupported	include/leveldb/status.h	/^    kNotSupported = 3,$/;"	e	enum:leveldb::Status::Code
kNumBuckets	util/histogram.h	/^  enum { kNumBuckets = 154 };$/;"	e	enum:leveldb::Histogram::__anon21
kNumLevels	db/dbformat.h	/^static const int kNumLevels = 7;$/;"	m	namespace:leveldb::config
kNumTestArgs	table/table_test.cc	/^static const int kNumTestArgs = sizeof(kTestArgList) \/ sizeof(kTestArgList[0]);$/;"	m	namespace:leveldb	file:
kOk	include/leveldb/status.h	/^    kOk = 0,$/;"	e	enum:leveldb::Status::Code
kPrevLogNumber	db/version_edit.cc	/^  kPrevLogNumber        = 9,$/;"	e	enum:leveldb::Tag	file:
kReverse	db/db_iter.cc	/^    kReverse$/;"	e	enum:leveldb::__anon5::DBIter::Direction	file:
kReverse	table/merger.cc	/^    kReverse$/;"	e	enum:leveldb::__anon14::MergingIterator::Direction	file:
kSnappyCompression	include/leveldb/options.h	/^  kSnappyCompression = 0x1,$/;"	e	enum:leveldb::CompressionType
kTableFile	db/filename.h	/^  kTableFile,$/;"	e	enum:leveldb::FileType
kTableMagicNumber	table/format.h	/^static const uint64_t kTableMagicNumber = 0xdb4775248b80fb57ull;$/;"	m	namespace:leveldb
kTargetFileSize	db/version_set.cc	/^static const int kTargetFileSize = 2 * 1048576;$/;"	m	namespace:leveldb	file:
kTempFile	db/filename.h	/^  kTempFile,$/;"	e	enum:leveldb::FileType
kTestArgList	table/table_test.cc	/^static const TestArgs kTestArgList[] = {$/;"	m	namespace:leveldb	file:
kTypeDeletion	db/dbformat.h	/^  kTypeDeletion = 0x0,$/;"	e	enum:leveldb::ValueType
kTypeValue	db/dbformat.h	/^  kTypeValue = 0x1,$/;"	e	enum:leveldb::ValueType
kValueSize	db/corruption_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueTypeForSeek	db/dbformat.h	/^static const ValueType kValueTypeForSeek = kTypeValue;$/;"	m	namespace:leveldb
kZeroType	db/log_format.h	/^  kZeroType = 0,$/;"	e	enum:leveldb::log::RecordType
key	db/db_iter.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon5::DBIter
key	db/db_test.cc	/^    virtual Slice key() const { return iter_->first; }$/;"	f	class:leveldb::ModelDB::ModelIter
key	db/memtable.cc	/^  virtual Slice key() const { return GetLengthPrefixedSlice(iter_->key()); }$/;"	f	class:leveldb::MemTableIterator
key	db/skiplist.h	/^  Key const key;$/;"	m	struct:leveldb::SkipList::Node
key	db/skiplist.h	/^inline const Key& SkipList<Key,Comparator>::Iterator::key() const {$/;"	f	class:leveldb::SkipList::Iterator
key	db/skiplist_test.cc	/^  static uint64_t key(Key key) { return (key >> 40); }$/;"	f	class:leveldb::ConcurrentTest	file:
key	db/version_set.cc	/^  Slice key() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
key	db/write_batch_internal.h	/^    const Slice& key() const { return key_; }$/;"	f	class:leveldb::WriteBatchInternal::Iterator
key	table/block.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::Block::Iter
key	table/iterator.cc	/^  Slice key() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon13::EmptyIterator
key	table/iterator_wrapper.h	/^  Slice key() const { assert(Valid()); return key_; }$/;"	f	class:leveldb::IteratorWrapper
key	table/merger.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon14::MergingIterator
key	table/table_test.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::KeyConvertingIterator
key	table/two_level_iterator.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
key	util/cache.cc	/^  Slice key() const {$/;"	f	struct:leveldb::__anon22::LRUHandle
key_	db/write_batch_internal.h	/^    Slice key_;$/;"	m	class:leveldb::WriteBatchInternal::Iterator
key_	table/block.cc	/^  std::string key_;$/;"	m	class:leveldb::Block::Iter	file:
key_	table/iterator_wrapper.h	/^  Slice key_;$/;"	m	class:leveldb::IteratorWrapper
key_data	util/cache.cc	/^  char key_data[1];   \/\/ Beginning of key$/;"	m	struct:leveldb::__anon22::LRUHandle	file:
key_length	util/cache.cc	/^  size_t key_length;$/;"	m	struct:leveldb::__anon22::LRUHandle	file:
largest	db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
largest	db/version_edit.h	/^  InternalKey largest;        \/\/ Largest internal key served by table$/;"	m	struct:leveldb::FileMetaData
last_id_	util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon22::LRUCache	file:
last_key	table/table_builder.cc	/^  std::string last_key;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
last_key_	table/block_builder.h	/^  std::string           last_key_;$/;"	m	class:leveldb::BlockBuilder
last_op_finish_	db/db_bench.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_options_	db/db_test.cc	/^  Options last_options_;$/;"	m	class:leveldb::DBTest	file:
last_sequence_	db/version_edit.h	/^  SequenceNumber last_sequence_;$/;"	m	class:leveldb::VersionEdit
last_sequence_	db/version_set.h	/^  uint64_t last_sequence_;$/;"	m	class:leveldb::VersionSet
last_sync_	util/env_posix.cc	/^  char* last_sync_;       \/\/ Where have we synced up to$/;"	m	class:leveldb::__anon17::PosixMmapFile	file:
level	db/version_set.h	/^  int level() const { return level_; }$/;"	f	class:leveldb::Compaction
level_	db/version_set.h	/^  int level_;$/;"	m	class:leveldb::Compaction
level_ptrs_	db/version_set.h	/^  size_t level_ptrs_[config::kNumLevels];$/;"	m	class:leveldb::Compaction
leveldb	db/builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/builder.h	/^namespace leveldb {$/;"	n
leveldb	db/corruption_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_bench.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_impl.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_impl.h	/^namespace leveldb {$/;"	n
leveldb	db/db_iter.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_iter.h	/^namespace leveldb {$/;"	n
leveldb	db/db_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/dbformat.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/dbformat.h	/^namespace leveldb {$/;"	n
leveldb	db/dbformat_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/filename.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/filename.h	/^namespace leveldb {$/;"	n
leveldb	db/filename_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_format.h	/^namespace leveldb {$/;"	n
leveldb	db/log_reader.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_reader.h	/^namespace leveldb {$/;"	n
leveldb	db/log_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_writer.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_writer.h	/^namespace leveldb {$/;"	n
leveldb	db/memtable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/memtable.h	/^namespace leveldb {$/;"	n
leveldb	db/repair.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/skiplist.h	/^namespace leveldb {$/;"	n
leveldb	db/skiplist_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/snapshot.h	/^namespace leveldb {$/;"	n
leveldb	db/table_cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/table_cache.h	/^namespace leveldb {$/;"	n
leveldb	db/version_edit.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_edit.h	/^namespace leveldb {$/;"	n
leveldb	db/version_edit_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_set.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_set.h	/^namespace leveldb {$/;"	n
leveldb	db/write_batch.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/write_batch_internal.h	/^namespace leveldb {$/;"	n
leveldb	db/write_batch_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	include/leveldb/cache.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/comparator.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/db.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/env.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/iterator.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/options.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/slice.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/status.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/table.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/table_builder.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/write_batch.h	/^namespace leveldb {$/;"	n
leveldb	port/port_android.cc	/^namespace leveldb {$/;"	n	file:
leveldb	port/port_android.h	/^namespace leveldb {$/;"	n
leveldb	port/port_chromium.cc	/^namespace leveldb {$/;"	n	file:
leveldb	port/port_chromium.h	/^namespace leveldb {$/;"	n
leveldb	port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	port/port_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	port/port_posix.h	/^namespace leveldb {$/;"	n
leveldb	port/sha1_portable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	port/sha1_portable.h	/^namespace leveldb {$/;"	n
leveldb	port/sha1_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/block.h	/^namespace leveldb {$/;"	n
leveldb	table/block_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/block_builder.h	/^namespace leveldb {$/;"	n
leveldb	table/format.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/format.h	/^namespace leveldb {$/;"	n
leveldb	table/iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/iterator_wrapper.h	/^namespace leveldb {$/;"	n
leveldb	table/merger.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/merger.h	/^namespace leveldb {$/;"	n
leveldb	table/table.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/table_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/table_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/two_level_iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/two_level_iterator.h	/^namespace leveldb {$/;"	n
leveldb	util/arena.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/arena.h	/^namespace leveldb {$/;"	n
leveldb	util/arena_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/cache_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/coding.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/coding.h	/^namespace leveldb {$/;"	n
leveldb	util/coding_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/comparator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/crc32c.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/crc32c.h	/^namespace leveldb {$/;"	n
leveldb	util/crc32c_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_chromium.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/hash.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/hash.h	/^namespace leveldb {$/;"	n
leveldb	util/histogram.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/histogram.h	/^namespace leveldb {$/;"	n
leveldb	util/logging.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/logging.h	/^namespace leveldb {$/;"	n
leveldb	util/mutexlock.h	/^namespace leveldb {$/;"	n
leveldb	util/options.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/random.h	/^namespace leveldb {$/;"	n
leveldb	util/status.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/testharness.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/testharness.h	/^namespace leveldb {$/;"	n
leveldb	util/testutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/testutil.h	/^namespace leveldb {$/;"	n
limit	include/leveldb/db.h	/^  Slice limit;$/;"	m	struct:leveldb::Range
limit_	util/env_posix.cc	/^  char* limit_;           \/\/ Limit of the mapped region$/;"	m	class:leveldb::__anon17::PosixMmapFile	file:
line_	util/testharness.h	/^  int line_;$/;"	m	class:leveldb::test::Tester
list_	db/skiplist.h	/^    const SkipList* list_;$/;"	m	class:leveldb::SkipList::Iterator
list_	db/skiplist_test.cc	/^  SkipList<Key, Comparator> list_;$/;"	m	class:leveldb::ConcurrentTest	file:
list_	db/snapshot.h	/^  Snapshot list_;$/;"	m	class:leveldb::SnapshotList
list_	db/snapshot.h	/^  SnapshotList* list_;                 \/\/ just for sanity checks$/;"	m	class:leveldb::Snapshot
log	db/log_format.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/log_reader.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_reader.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/log_test.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_writer.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_writer.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/version_set.h	/^namespace log { class Writer; }$/;"	n	namespace:leveldb
log_	db/db_impl.h	/^  log::Writer* log_;$/;"	m	class:leveldb::DBImpl
log_number_	db/version_edit.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionEdit
log_number_	db/version_set.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionSet
logfile_	db/db_impl.h	/^  WritableFile* logfile_;$/;"	m	class:leveldb::DBImpl
logs_	db/repair.cc	/^  std::vector<uint64_t> logs_;$/;"	m	class:leveldb::__anon3::Repairer	file:
lru_	util/cache.cc	/^  LRUHandle lru_;$/;"	m	class:leveldb::__anon22::LRUCache	file:
main	db/corruption_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/db_bench.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/db_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/dbformat_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/filename_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/log_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/skiplist_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/version_edit_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/write_batch_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	port/sha1_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	table/table_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/arena_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/cache_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/coding_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/crc32c_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/env_test.cc	/^int main(int argc, char** argv) {$/;"	f
manifest_file_number_	db/version_set.h	/^  uint64_t manifest_file_number_;$/;"	m	class:leveldb::VersionSet
manifests_	db/repair.cc	/^  std::vector<std::string> manifests_;$/;"	m	class:leveldb::__anon3::Repairer	file:
map_	db/db_test.cc	/^    const KVMap* const map_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
map_	db/db_test.cc	/^  KVMap map_;$/;"	m	class:leveldb::ModelDB	file:
map_size_	util/env_posix.cc	/^  size_t map_size_;       \/\/ How much extra memory to map at a time$/;"	m	class:leveldb::__anon17::PosixMmapFile	file:
max_	util/histogram.h	/^  double max_;$/;"	m	class:leveldb::Histogram
max_height_	db/skiplist.h	/^  port::AtomicPointer max_height_;   \/\/ Height of the entire list$/;"	m	class:leveldb::SkipList
max_open_files	include/leveldb/options.h	/^  int max_open_files;$/;"	m	struct:leveldb::Options
max_output_file_size_	db/version_set.h	/^  uint64_t max_output_file_size_;$/;"	m	class:leveldb::Compaction
max_sequence	db/repair.cc	/^    SequenceNumber max_sequence;$/;"	m	struct:leveldb::__anon3::Repairer::TableInfo	file:
mem_	db/db_impl.h	/^  MemTable* mem_;$/;"	m	class:leveldb::DBImpl
memtable_	table/table_test.cc	/^  MemTable* memtable_;$/;"	m	class:leveldb::MemTableConstructor	file:
message_	db/db_bench.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
message_	db/log_test.cc	/^    std::string message_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
meta	db/repair.cc	/^    FileMetaData meta;$/;"	m	struct:leveldb::__anon3::Repairer::TableInfo	file:
metaindex_handle	table/format.h	/^  const BlockHandle& metaindex_handle() const { return metaindex_handle_; }$/;"	f	class:leveldb::Footer
metaindex_handle	table/table.cc	/^  BlockHandle metaindex_handle;  \/\/ Handle to metaindex_block: saved from footer$/;"	m	struct:leveldb::Table::Rep	file:
metaindex_handle_	table/format.h	/^  BlockHandle metaindex_handle_;$/;"	m	class:leveldb::Footer
micros	db/db_impl.h	/^    int64_t micros;$/;"	m	struct:leveldb::DBImpl::CompactionStats
min_	util/histogram.h	/^  double min_;$/;"	m	class:leveldb::Histogram
mu	util/env_test.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::State	file:
mu_	db/skiplist_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::TestState	file:
mu_	port/port_android.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	port/port_android.h	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::port::Mutex
mu_	port/port_chromium.h	/^  base::Lock mu_;$/;"	m	class:leveldb::port::Mutex
mu_	port/port_posix.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	port/port_posix.h	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::port::Mutex
mu_	util/env_chromium.cc	/^  ::base::Lock mu_;$/;"	m	class:leveldb::__anon20::ChromiumEnv	file:
mu_	util/env_posix.cc	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::__anon17::PosixEnv	file:
mu_	util/env_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::EnvPosixTest	file:
mu_	util/mutexlock.h	/^  port::Mutex *const mu_;$/;"	m	class:leveldb::MutexLock::port
mutex_	db/db_impl.h	/^  port::Mutex mutex_;$/;"	m	class:leveldb::DBImpl
mutex_	util/cache.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon22::LRUCache	file:
n_	table/merger.cc	/^  int n_;$/;"	m	class:leveldb::__anon14::MergingIterator	file:
name	util/testharness.cc	/^  const char* name;$/;"	m	struct:leveldb::test::__anon16::Test	file:
new_files_	db/version_edit.h	/^  std::vector< std::pair<int, FileMetaData> > new_files_;$/;"	m	class:leveldb::VersionEdit
newest	db/snapshot.h	/^  Snapshot* newest() const { assert(!empty()); return list_.prev_; }$/;"	f	class:leveldb::SnapshotList
next	include/leveldb/iterator.h	/^    Cleanup* next;$/;"	m	struct:leveldb::Iterator::Cleanup
next	util/cache.cc	/^  LRUHandle* next;$/;"	m	struct:leveldb::__anon22::LRUHandle	file:
next_	db/skiplist.h	/^  port::AtomicPointer next_[1];$/;"	m	struct:leveldb::SkipList::Node
next_	db/snapshot.h	/^  Snapshot* next_;$/;"	m	class:leveldb::Snapshot
next_	db/version_set.h	/^  Version* next_;               \/\/ Next version in linked list$/;"	m	class:leveldb::Version
next_file_number_	db/repair.cc	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::__anon3::Repairer	file:
next_file_number_	db/version_edit.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionEdit
next_file_number_	db/version_set.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionSet
next_report_	db/db_bench.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
node_	db/skiplist.h	/^    Node* node_;$/;"	m	class:leveldb::SkipList::Iterator
num_	db/db_bench.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	util/histogram.h	/^  double num_;$/;"	m	class:leveldb::Histogram
num_entries	table/table_builder.cc	/^  int64_t num_entries;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
num_input_files	db/version_set.h	/^  int num_input_files(int which) const { return inputs_[which].size(); }$/;"	f	class:leveldb::Compaction
num_restarts_	table/block.cc	/^  uint32_t const num_restarts_; \/\/ Number of uint32_t entries in restart array$/;"	m	class:leveldb::Block::Iter	file:
num_running	util/env_test.cc	/^  int num_running;$/;"	m	struct:leveldb::State	file:
num_writable_file_errors_	util/testutil.h	/^  int num_writable_file_errors_;$/;"	m	class:leveldb::test::ErrorEnv
number	db/db_impl.cc	/^    uint64_t number;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
number	db/version_edit.h	/^  uint64_t number;$/;"	m	struct:leveldb::FileMetaData
number_	db/snapshot.h	/^  SequenceNumber number_;  \/\/ const after creation$/;"	m	class:leveldb::Snapshot
offset	table/format.h	/^  uint64_t offset() const { return offset_; }$/;"	f	class:leveldb::BlockHandle
offset	table/table_builder.cc	/^  uint64_t offset;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
offset_	table/format.h	/^  uint64_t offset_;$/;"	m	class:leveldb::BlockHandle
ok	include/leveldb/status.h	/^  bool ok() const { return (state_ == NULL); }$/;"	f	class:leveldb::Status
ok	include/leveldb/table_builder.h	/^  bool ok() const { return status().ok(); }$/;"	f	class:leveldb::TableBuilder
ok_	util/testharness.h	/^  bool ok_;$/;"	m	class:leveldb::test::Tester
oldest	db/snapshot.h	/^  Snapshot* oldest() const { assert(!empty()); return list_.next_; }$/;"	f	class:leveldb::SnapshotList
oldest_	db/version_set.h	/^  Version* oldest_;     \/\/ Pointer to the first (oldest) list entry$/;"	m	class:leveldb::VersionSet
once	util/env_posix.cc	/^static pthread_once_t once = PTHREAD_ONCE_INIT;$/;"	m	namespace:leveldb	file:
op	db/write_batch_internal.h	/^    ValueType op() const { return op_; }$/;"	f	class:leveldb::WriteBatchInternal::Iterator
op_	db/write_batch_internal.h	/^    ValueType op_;$/;"	m	class:leveldb::WriteBatchInternal::Iterator
operator !=	include/leveldb/slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator ()	db/memtable.cc	/^int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)$/;"	f	class:leveldb::MemTable::KeyComparator
operator ()	db/skiplist_test.cc	/^  int operator()(const Key& a, const Key& b) const {$/;"	f	struct:leveldb::Comparator
operator ()	db/version_set.cc	/^  bool operator()(FileMetaData* f1, FileMetaData* f2) const {$/;"	f	struct:leveldb::VersionSet::BySmallestKey
operator ()	table/table_test.cc	/^  bool operator()(const std::string& a, const std::string& b) const {$/;"	f	struct:leveldb::__anon10::STLLessThan
operator ()	util/cache.cc	/^    bool operator() (LRUHandle* a, LRUHandle* b) const {$/;"	f	struct:leveldb::__anon22::HandleHashCompare
operator ()	util/cache.cc	/^    inline bool operator()(LRUHandle* a, LRUHandle* b) const {$/;"	f	struct:leveldb::__anon22::HandleEq
operator ()	util/cache.cc	/^    inline size_t operator()(LRUHandle* h) const {$/;"	f	struct:leveldb::__anon22::HandleHash
operator ()	util/cache.cc	/^    size_t operator() (LRUHandle* h) const {$/;"	f	struct:leveldb::__anon22::HandleHashCompare
operator <<	util/testharness.h	/^  Tester& operator<<(const V& value) {$/;"	f	class:leveldb::test::Tester
operator =	include/leveldb/status.h	/^inline void Status::operator=(const Status& s) {$/;"	f	class:leveldb::Status
operator ==	include/leveldb/slice.h	/^inline bool operator==(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator []	include/leveldb/slice.h	/^  char operator[](size_t n) const {$/;"	f	class:leveldb::Slice
options	table/table.cc	/^  Options options;$/;"	m	struct:leveldb::Table::Rep	file:
options	table/table_builder.cc	/^  Options options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
options_	db/corruption_test.cc	/^  Options options_;$/;"	m	class:leveldb::CorruptionTest	file:
options_	db/db_impl.h	/^  const Options options_;  \/\/ options_.comparator == &internal_comparator_$/;"	m	class:leveldb::DBImpl
options_	db/db_test.cc	/^  const Options options_;$/;"	m	class:leveldb::ModelDB	file:
options_	db/repair.cc	/^  Options const options_;$/;"	m	class:leveldb::__anon3::Repairer	file:
options_	db/table_cache.h	/^  const Options* options_;$/;"	m	class:leveldb::TableCache
options_	db/version_set.h	/^  const Options* const options_;$/;"	m	class:leveldb::VersionSet
options_	table/block_builder.h	/^  const Options*        options_;$/;"	m	class:leveldb::BlockBuilder
options_	table/table_test.cc	/^  Options options_;$/;"	m	class:leveldb::Harness	file:
options_	table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon8::TwoLevelIterator	file:
outfile	db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
outputs	db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
overlapped_bytes_	db/version_set.h	/^  int64_t overlapped_bytes_;  \/\/ Bytes of overlap between current output$/;"	m	class:leveldb::Compaction
owned_	db/db_test.cc	/^    const bool owned_;  \/\/ Do we own map_$/;"	m	class:leveldb::ModelDB::ModelIter	file:
owns_cache_	db/db_impl.h	/^  bool owns_cache_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	db/db_impl.h	/^  bool owns_info_log_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	db/repair.cc	/^  bool owns_info_log_;$/;"	m	class:leveldb::__anon3::Repairer	file:
page_size_	util/env_chromium.cc	/^  size_t page_size_;$/;"	m	class:leveldb::__anon20::ChromiumEnv	file:
page_size_	util/env_posix.cc	/^  size_t page_size_;$/;"	m	class:leveldb::__anon17::PosixEnv	file:
page_size_	util/env_posix.cc	/^  size_t page_size_;$/;"	m	class:leveldb::__anon17::PosixMmapFile	file:
paranoid_checks	include/leveldb/options.h	/^  bool paranoid_checks;$/;"	m	struct:leveldb::Options
pending_handle	table/table_builder.cc	/^  BlockHandle pending_handle;  \/\/ Handle to add to index block$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_index_entry	table/table_builder.cc	/^  bool pending_index_entry;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_outputs_	db/db_impl.h	/^  std::set<uint64_t> pending_outputs_;$/;"	m	class:leveldb::DBImpl
pending_sync_	util/env_posix.cc	/^  bool pending_sync_;$/;"	m	class:leveldb::__anon17::PosixMmapFile	file:
port	port/port_android.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	port/port_android.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/port_chromium.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	port/port_chromium.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/port_posix.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	port/port_posix.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/sha1_portable.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	port/sha1_portable.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/sha1_test.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
pos_	db/db_bench.cc	/^  int pos_;$/;"	m	class:leveldb::__anon7::RandomGenerator	file:
post_message_	db/db_bench.cc	/^  std::string post_message_;$/;"	m	class:leveldb::Benchmark	file:
post_write_snapshot	include/leveldb/options.h	/^  const Snapshot** post_write_snapshot;$/;"	m	struct:leveldb::WriteOptions
prev	util/cache.cc	/^  LRUHandle* prev;$/;"	m	struct:leveldb::__anon22::LRUHandle	file:
prev_	db/snapshot.h	/^  Snapshot* prev_;$/;"	m	class:leveldb::Snapshot
prev_log_number_	db/version_edit.h	/^  uint64_t prev_log_number_;$/;"	m	class:leveldb::VersionEdit
prev_log_number_	db/version_set.h	/^  uint64_t prev_log_number_;  \/\/ 0 or backing store for memtable being compacted$/;"	m	class:leveldb::VersionSet
queue_	util/env_chromium.cc	/^  BGQueue queue_;$/;"	m	class:leveldb::__anon20::ChromiumEnv	file:
queue_	util/env_posix.cc	/^  BGQueue queue_;$/;"	m	class:leveldb::__anon17::PosixEnv	file:
quit_flag_	db/skiplist_test.cc	/^  port::AtomicPointer quit_flag_;$/;"	m	class:leveldb::TestState	file:
rand_	db/db_bench.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
reader_	db/log_test.cc	/^  Reader reader_;$/;"	m	class:leveldb::log::LogTest	file:
reading_	db/log_test.cc	/^  bool reading_;$/;"	m	class:leveldb::log::LogTest	file:
refs	db/version_edit.h	/^  int refs;$/;"	m	struct:leveldb::FileMetaData
refs	util/cache.cc	/^  size_t refs;        \/\/ TODO(opt): Pack with "key_length"?$/;"	m	struct:leveldb::__anon22::LRUHandle	file:
refs_	db/version_set.h	/^  int refs_;                    \/\/ Number of live refs to this version$/;"	m	class:leveldb::Version
remove_prefix	include/leveldb/slice.h	/^  void remove_prefix(size_t n) {$/;"	f	class:leveldb::Slice
rep_	db/dbformat.h	/^  std::string rep_;$/;"	m	class:leveldb::InternalKey
rep_	include/leveldb/cache.h	/^  Rep* rep_;$/;"	m	class:leveldb::Cache
rep_	include/leveldb/table.h	/^  Rep* rep_;$/;"	m	class:leveldb::Table
rep_	include/leveldb/table_builder.h	/^  Rep* rep_;$/;"	m	class:leveldb::TableBuilder
rep_	include/leveldb/write_batch.h	/^  std::string rep_;  \/\/ See comment in write_batch.cc for the format of rep_$/;"	m	class:leveldb::WriteBatch
rep_	port/port_android.h	/^  void* rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	port/port_chromium.h	/^  Rep rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	port/port_example.h	/^  intptr_t rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	port/port_posix.h	/^  std::atomic<void*> rep_;$/;"	m	class:leveldb::port::AtomicPointer
report_	db/log_test.cc	/^  ReportCollector report_;$/;"	m	class:leveldb::log::LogTest	file:
reporter_	db/log_reader.h	/^  Reporter* const reporter_;$/;"	m	class:leveldb::log::Reader
restart_index_	table/block.cc	/^  uint32_t restart_index_;  \/\/ Index of restart block in which current_ falls$/;"	m	class:leveldb::Block::Iter	file:
restart_interval	table/table_test.cc	/^  int restart_interval;$/;"	m	struct:leveldb::TestArgs	file:
restart_offset_	table/block.h	/^  uint32_t restart_offset_;     \/\/ Offset in data_ of restart array$/;"	m	class:leveldb::Block
restarts_	table/block.cc	/^  uint32_t const restarts_;     \/\/ Offset of restart array (list of fixed32)$/;"	m	class:leveldb::Block::Iter	file:
restarts_	table/block_builder.h	/^  std::vector<uint32_t> restarts_;    \/\/ Restart points$/;"	m	class:leveldb::BlockBuilder
returned_partial_	db/log_test.cc	/^    bool returned_partial_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
reverse_compare	table/table_test.cc	/^  bool reverse_compare;$/;"	m	struct:leveldb::TestArgs	file:
reverse_key_comparator	table/table_test.cc	/^static ReverseKeyComparator reverse_key_comparator;$/;"	m	namespace:leveldb	file:
rnd_	db/corruption_test.cc	/^  Random rnd_;$/;"	m	class:leveldb::CorruptionTest	file:
rnd_	db/skiplist.h	/^  Random rnd_;$/;"	m	class:leveldb::SkipList
saved_key_	db/db_iter.cc	/^  std::string saved_key_;     \/\/ == current key when direction_==kReverse$/;"	m	class:leveldb::__anon5::DBIter	file:
saved_value_	db/db_iter.cc	/^  std::string saved_value_;   \/\/ == current raw value when direction_==kReverse$/;"	m	class:leveldb::__anon5::DBIter	file:
seed_	db/skiplist_test.cc	/^  int seed_;$/;"	m	class:leveldb::TestState	file:
seed_	util/random.h	/^  uint32_t seed_;$/;"	m	class:leveldb::Random
seen_key_	db/version_set.h	/^  bool seen_key_;             \/\/ Some output key has been seen$/;"	m	class:leveldb::Compaction
seq_	db/write_batch_internal.h	/^    SequenceNumber seq_;$/;"	m	class:leveldb::WriteBatchInternal::Iterator
sequence	db/dbformat.h	/^  SequenceNumber sequence;$/;"	m	struct:leveldb::ParsedInternalKey
sequence_	db/db_iter.cc	/^  SequenceNumber const sequence_;$/;"	m	class:leveldb::__anon5::DBIter	file:
sequence_number	db/write_batch_internal.h	/^    SequenceNumber sequence_number() const { return seq_; }$/;"	f	class:leveldb::WriteBatchInternal::Iterator
set_index_handle	table/format.h	/^  void set_index_handle(const BlockHandle& h) {$/;"	f	class:leveldb::Footer
set_metaindex_handle	table/format.h	/^  void set_metaindex_handle(const BlockHandle& h) { metaindex_handle_ = h; }$/;"	f	class:leveldb::Footer
set_offset	table/format.h	/^  void set_offset(uint64_t offset) { offset_ = offset; }$/;"	f	class:leveldb::BlockHandle
set_size	table/format.h	/^  void set_size(uint64_t size) { size_ = size; }$/;"	f	class:leveldb::BlockHandle
shutting_down_	db/db_impl.h	/^  port::AtomicPointer shutting_down_;$/;"	m	class:leveldb::DBImpl
size	include/leveldb/slice.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Slice
size	table/block.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Block
size	table/format.h	/^  uint64_t size() const { return size_; }$/;"	f	class:leveldb::BlockHandle
size_	include/leveldb/slice.h	/^  size_t size_;$/;"	m	class:leveldb::Slice
size_	table/block.h	/^  size_t size_;$/;"	m	class:leveldb::Block
size_	table/format.h	/^  uint64_t size_;$/;"	m	class:leveldb::BlockHandle
smallest	db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
smallest	db/version_edit.h	/^  InternalKey smallest;       \/\/ Smallest internal key served by table$/;"	m	struct:leveldb::FileMetaData
smallest_snapshot	db/db_impl.cc	/^  SequenceNumber smallest_snapshot;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
snapshot	include/leveldb/options.h	/^  const Snapshot* snapshot;$/;"	m	struct:leveldb::ReadOptions
snapshots_	db/db_impl.h	/^  SnapshotList snapshots_;$/;"	m	class:leveldb::DBImpl
snapshots_	db/db_test.cc	/^  SnapshotList snapshots_;$/;"	m	class:leveldb::ModelDB	file:
snprintf	port/port_chromium.h	25;"	d
source_	db/log_test.cc	/^  StringSource source_;$/;"	m	class:leveldb::log::LogTest	file:
source_	table/table_test.cc	/^  StringSource* source_;$/;"	m	class:leveldb::TableConstructor	file:
ss_	util/testharness.h	/^  std::stringstream ss_;$/;"	m	class:leveldb::test::Tester
start	include/leveldb/db.h	/^  Slice start;$/;"	m	struct:leveldb::Range
start_	db/db_bench.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
started_bgthread_	util/env_chromium.cc	/^  bool started_bgthread_;$/;"	m	class:leveldb::__anon20::ChromiumEnv	file:
started_bgthread_	util/env_posix.cc	/^  bool started_bgthread_;$/;"	m	class:leveldb::__anon17::PosixEnv	file:
starts_with	include/leveldb/slice.h	/^  bool starts_with(const Slice& x) const {$/;"	f	class:leveldb::Slice
state_	db/skiplist_test.cc	/^  ReaderState state_;$/;"	m	class:leveldb::TestState	file:
state_	include/leveldb/status.h	/^  State* state_;$/;"	m	class:leveldb::Status
state_cv_	db/skiplist_test.cc	/^  port::CondVar state_cv_;$/;"	m	class:leveldb::TestState	file:
stats_	db/db_impl.h	/^  CompactionStats stats_[config::kNumLevels];$/;"	m	class:leveldb::DBImpl
status	db/db_iter.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon5::DBIter
status	db/db_test.cc	/^    virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::ModelDB::ModelIter
status	db/memtable.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::MemTableIterator
status	db/version_set.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::Version::LevelFileNumIterator
status	db/write_batch_internal.h	/^    Status status() const { return status_; }$/;"	f	class:leveldb::WriteBatchInternal::Iterator
status	table/block.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::Block::Iter
status	table/iterator.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::__anon13::EmptyIterator
status	table/iterator_wrapper.h	/^  Status status() const { assert(iter_); return iter_->status(); }$/;"	f	class:leveldb::IteratorWrapper
status	table/merger.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon14::MergingIterator
status	table/table.cc	/^  Status status;$/;"	m	struct:leveldb::Table::Rep	file:
status	table/table_builder.cc	/^  Status status;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
status	table/table_builder.cc	/^Status TableBuilder::status() const {$/;"	f	class:leveldb::TableBuilder
status	table/table_test.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::KeyConvertingIterator
status	table/two_level_iterator.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
status_	db/db_iter.cc	/^  Status status_;$/;"	m	class:leveldb::__anon5::DBIter	file:
status_	db/write_batch_internal.h	/^    Status status_;$/;"	m	class:leveldb::WriteBatchInternal::Iterator
status_	table/block.cc	/^  Status status_;$/;"	m	class:leveldb::Block::Iter	file:
status_	table/iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon13::EmptyIterator	file:
status_	table/table_test.cc	/^  mutable Status status_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
status_	table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon8::TwoLevelIterator	file:
sum_	util/histogram.h	/^  double sum_;$/;"	m	class:leveldb::Histogram
sum_squares_	util/histogram.h	/^  double sum_squares_;$/;"	m	class:leveldb::Histogram
sync	include/leveldb/options.h	/^  bool sync;$/;"	m	struct:leveldb::WriteOptions
t_	db/skiplist_test.cc	/^  ConcurrentTest t_;$/;"	m	class:leveldb::TestState	file:
table	db/table_cache.cc	/^  Table* table;$/;"	m	struct:leveldb::TableAndFile	file:
table0_	util/crc32c.cc	/^static const uint32_t table0_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table1_	util/crc32c.cc	/^static const uint32_t table1_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table2_	util/crc32c.cc	/^static const uint32_t table2_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table3_	util/crc32c.cc	/^static const uint32_t table3_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table_	db/memtable.h	/^  Table table_;$/;"	m	class:leveldb::MemTable
table_	table/table_test.cc	/^  Table* table_;$/;"	m	class:leveldb::TableConstructor	file:
table_	util/cache.cc	/^  HandleTable table_;$/;"	m	class:leveldb::__anon22::LRUCache	file:
table_cache_	db/db_impl.h	/^  TableCache* table_cache_;$/;"	m	class:leveldb::DBImpl
table_cache_	db/repair.cc	/^  TableCache* table_cache_;$/;"	m	class:leveldb::__anon3::Repairer	file:
table_cache_	db/version_set.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::VersionSet
table_numbers_	db/repair.cc	/^  std::vector<uint64_t> table_numbers_;$/;"	m	class:leveldb::__anon3::Repairer	file:
tables_	db/repair.cc	/^  std::vector<TableInfo> tables_;$/;"	m	class:leveldb::__anon3::Repairer	file:
target	include/leveldb/env.h	/^  Env* target() const { return target_; }$/;"	f	class:leveldb::EnvWrapper
target_	include/leveldb/env.h	/^  Env* target_;$/;"	m	class:leveldb::EnvWrapper
test	util/testharness.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	util/testharness.h	/^namespace test {$/;"	n	namespace:leveldb
test	util/testutil.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	util/testutil.h	/^namespace test {$/;"	n	namespace:leveldb
test_directory_	util/env_chromium.cc	/^  FilePath test_directory_;$/;"	m	class:leveldb::__anon20::ChromiumEnv	file:
tests	util/testharness.cc	/^std::vector<Test>* tests;$/;"	m	namespace:leveldb::test::__anon16	file:
tiny_cache_	db/corruption_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::CorruptionTest	file:
tmp_	db/memtable.cc	/^  std::string tmp_;       \/\/ For passing to EncodeKey$/;"	m	class:leveldb::MemTableIterator	file:
total_bytes	db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
type	db/dbformat.h	/^  ValueType type;$/;"	m	struct:leveldb::ParsedInternalKey
type	table/table_test.cc	/^  TestType type;$/;"	m	struct:leveldb::TestArgs	file:
type_crc_	db/log_writer.h	/^  uint32_t type_crc_[kMaxRecordType + 1];$/;"	m	class:leveldb::log::Writer
uint16_t	port/win/stdint.h	/^typedef unsigned short        uint16_t;$/;"	t
uint32_t	port/win/stdint.h	/^typedef unsigned int          uint32_t;$/;"	t
uint64_t	port/win/stdint.h	/^typedef unsigned long long    uint64_t;$/;"	t
uint8_t	port/win/stdint.h	/^typedef unsigned char         uint8_t;$/;"	t
usage_	util/cache.cc	/^  size_t usage_;$/;"	m	class:leveldb::__anon22::LRUCache	file:
user_comparator	db/db_impl.h	/^  const Comparator* user_comparator() const {$/;"	f	class:leveldb::DBImpl
user_comparator	db/dbformat.h	/^  const Comparator* user_comparator() const { return user_comparator_; }$/;"	f	class:leveldb::InternalKeyComparator
user_comparator_	db/db_iter.cc	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::__anon5::DBIter	file:
user_comparator_	db/dbformat.h	/^  const Comparator* user_comparator_;$/;"	m	class:leveldb::InternalKeyComparator
user_function	util/env_posix.cc	/^  void (*user_function)(void*);$/;"	m	struct:leveldb::__anon17::__anon18::StartThreadState	file:
user_key	db/dbformat.h	/^  Slice user_key() const { return ExtractUserKey(rep_); }$/;"	f	class:leveldb::InternalKey
user_key	db/dbformat.h	/^  Slice user_key;$/;"	m	struct:leveldb::ParsedInternalKey
va_copy	port/port_chromium.h	26;"	d
val	util/env_test.cc	/^  int val;$/;"	m	struct:leveldb::State	file:
valid_	db/db_iter.cc	/^  bool valid_;$/;"	m	class:leveldb::__anon5::DBIter	file:
valid_	table/iterator_wrapper.h	/^  bool valid_;$/;"	m	class:leveldb::IteratorWrapper
value	db/db_iter.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon5::DBIter
value	db/db_test.cc	/^    virtual Slice value() const { return iter_->second; }$/;"	f	class:leveldb::ModelDB::ModelIter
value	db/memtable.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::MemTableIterator
value	db/version_set.cc	/^  Slice value() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
value	db/write_batch_internal.h	/^    const Slice& value() const { return value_; }$/;"	f	class:leveldb::WriteBatchInternal::Iterator
value	table/block.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::Block::Iter
value	table/iterator.cc	/^  Slice value() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon13::EmptyIterator
value	table/iterator_wrapper.h	/^  Slice value() const { assert(Valid()); return iter_->value(); }$/;"	f	class:leveldb::IteratorWrapper
value	table/merger.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon14::MergingIterator
value	table/table_test.cc	/^  virtual Slice value() const { return iter_->value(); }$/;"	f	class:leveldb::KeyConvertingIterator
value	table/two_level_iterator.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
value	util/cache.cc	/^  void* value;$/;"	m	struct:leveldb::__anon22::LRUHandle	file:
value_	db/write_batch_internal.h	/^    Slice value_;$/;"	m	class:leveldb::WriteBatchInternal::Iterator
value_	table/block.cc	/^  Slice value_;$/;"	m	class:leveldb::Block::Iter	file:
value_buf_	db/version_set.cc	/^  mutable char value_buf_[16];$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
verify_checksums	include/leveldb/options.h	/^  bool verify_checksums;$/;"	m	struct:leveldb::ReadOptions
versions_	db/db_impl.h	/^  VersionSet* versions_;$/;"	m	class:leveldb::DBImpl
vset_	db/version_set.cc	/^  VersionSet* vset_;$/;"	m	class:leveldb::VersionSet::Builder	file:
vset_	db/version_set.h	/^  VersionSet* vset_;            \/\/ VersionSet to which this Version belongs$/;"	m	class:leveldb::Version
writable_file_error_	util/testutil.h	/^  bool writable_file_error_;$/;"	m	class:leveldb::test::ErrorEnv
write_buffer_size	include/leveldb/options.h	/^  size_t write_buffer_size;$/;"	m	struct:leveldb::Options
writer_	db/log_test.cc	/^  Writer writer_;$/;"	m	class:leveldb::log::LogTest	file:
~Arena	util/arena.cc	/^Arena::~Arena() {$/;"	f	class:leveldb::Arena
~Benchmark	db/db_bench.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Block	table/block.cc	/^Block::~Block() {$/;"	f	class:leveldb::Block
~BlockConstructor	table/table_test.cc	/^  ~BlockConstructor() {$/;"	f	class:leveldb::BlockConstructor
~Builder	db/version_set.cc	/^  ~Builder() {$/;"	f	class:leveldb::VersionSet::Builder
~Cache	util/cache.cc	/^Cache::~Cache() {$/;"	f	class:leveldb::Cache
~CacheTest	util/cache_test.cc	/^  ~CacheTest() {$/;"	f	class:leveldb::CacheTest
~ChromiumEnv	util/env_chromium.cc	/^  virtual ~ChromiumEnv() {$/;"	f	class:leveldb::__anon20::ChromiumEnv
~ChromiumRandomAccessFile	util/env_chromium.cc	/^  virtual ~ChromiumRandomAccessFile() { ::base::ClosePlatformFile(file_); }$/;"	f	class:leveldb::__anon20::ChromiumRandomAccessFile
~ChromiumSequentialFile	util/env_chromium.cc	/^  virtual ~ChromiumSequentialFile() { fclose(file_); }$/;"	f	class:leveldb::__anon20::ChromiumSequentialFile
~ChromiumWritableFile	util/env_chromium.cc	/^  ~ChromiumWritableFile() {$/;"	f	class:leveldb::__anon20::ChromiumWritableFile
~Compaction	db/version_set.cc	/^Compaction::~Compaction() {$/;"	f	class:leveldb::Compaction
~Comparator	util/comparator.cc	/^Comparator::~Comparator() { }$/;"	f	class:leveldb::Comparator
~CondVar	port/port_android.cc	/^CondVar::~CondVar() { $/;"	f	class:leveldb::port::CondVar
~CondVar	port/port_chromium.cc	/^CondVar::~CondVar() { }$/;"	f	class:leveldb::port::CondVar
~CondVar	port/port_posix.cc	/^CondVar::~CondVar() { PthreadCall("destroy cv", pthread_cond_destroy(&cv_)); }$/;"	f	class:leveldb::port::CondVar
~Constructor	table/table_test.cc	/^  virtual ~Constructor() { }$/;"	f	class:leveldb::Constructor
~CorruptionTest	db/corruption_test.cc	/^  ~CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
~DB	db/db_impl.cc	/^DB::~DB() { }$/;"	f	class:leveldb::DB
~DBConstructor	table/table_test.cc	/^  ~DBConstructor() {$/;"	f	class:leveldb::DBConstructor
~DBImpl	db/db_impl.cc	/^DBImpl::~DBImpl() {$/;"	f	class:leveldb::DBImpl
~DBIter	db/db_iter.cc	/^  virtual ~DBIter() {$/;"	f	class:leveldb::__anon5::DBIter
~DBTest	db/db_test.cc	/^  ~DBTest() {$/;"	f	class:leveldb::DBTest
~Env	util/env.cc	/^Env::~Env() {$/;"	f	class:leveldb::Env
~EnvWrapper	util/env.cc	/^EnvWrapper::~EnvWrapper() {$/;"	f	class:leveldb::EnvWrapper
~FileLock	util/env.cc	/^FileLock::~FileLock() {$/;"	f	class:leveldb::FileLock
~Harness	table/table_test.cc	/^  ~Harness() {$/;"	f	class:leveldb::Harness
~Histogram	util/histogram.h	/^  ~Histogram() { }$/;"	f	class:leveldb::Histogram
~Iterator	table/iterator.cc	/^Iterator::~Iterator() {$/;"	f	class:leveldb::Iterator
~IteratorWrapper	table/iterator_wrapper.h	/^  ~IteratorWrapper() { delete iter_; }$/;"	f	class:leveldb::IteratorWrapper
~KeyConvertingIterator	table/table_test.cc	/^  virtual ~KeyConvertingIterator() { delete iter_; }$/;"	f	class:leveldb::KeyConvertingIterator
~LRUCache	util/cache.cc	/^LRUCache::~LRUCache() {$/;"	f	class:leveldb::__anon22::LRUCache
~MemTable	db/memtable.cc	/^MemTable::~MemTable() {$/;"	f	class:leveldb::MemTable
~MemTableConstructor	table/table_test.cc	/^  ~MemTableConstructor() {$/;"	f	class:leveldb::MemTableConstructor
~MemTableIterator	db/memtable.cc	/^  virtual ~MemTableIterator() { delete iter_; }$/;"	f	class:leveldb::MemTableIterator
~MergingIterator	table/merger.cc	/^  virtual ~MergingIterator() {$/;"	f	class:leveldb::__anon14::MergingIterator
~ModelDB	db/db_test.cc	/^  ~ModelDB() { }$/;"	f	class:leveldb::ModelDB
~ModelIter	db/db_test.cc	/^    ~ModelIter() {$/;"	f	class:leveldb::ModelDB::ModelIter
~Mutex	port/port_android.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~Mutex	port/port_chromium.cc	/^Mutex::~Mutex() {$/;"	f	class:leveldb::port::Mutex
~Mutex	port/port_posix.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~MutexLock	util/mutexlock.h	/^  ~MutexLock() { this->mu_->Unlock(); }$/;"	f	class:leveldb::MutexLock
~PosixEnv	util/env_posix.cc	/^  virtual ~PosixEnv() {$/;"	f	class:leveldb::__anon17::PosixEnv
~PosixMmapFile	util/env_posix.cc	/^  ~PosixMmapFile() {$/;"	f	class:leveldb::__anon17::PosixMmapFile
~PosixRandomAccessFile	util/env_posix.cc	/^  virtual ~PosixRandomAccessFile() { close(fd_); }$/;"	f	class:leveldb::__anon17::PosixRandomAccessFile
~PosixSequentialFile	util/env_posix.cc	/^  virtual ~PosixSequentialFile() { fclose(file_); }$/;"	f	class:leveldb::__anon17::PosixSequentialFile
~RandomAccessFile	util/env.cc	/^RandomAccessFile::~RandomAccessFile() {$/;"	f	class:leveldb::RandomAccessFile
~Reader	db/log_reader.cc	/^Reader::~Reader() {$/;"	f	class:leveldb::log::Reader
~Rep	table/table.cc	/^  ~Rep() {$/;"	f	struct:leveldb::Table::Rep
~Repairer	db/repair.cc	/^  ~Repairer() {$/;"	f	class:leveldb::__anon3::Repairer
~Reporter	db/log_reader.cc	/^Reader::Reporter::~Reporter() {$/;"	f	class:leveldb::log::Reader::Reporter
~SequentialFile	util/env.cc	/^SequentialFile::~SequentialFile() {$/;"	f	class:leveldb::SequentialFile
~Status	include/leveldb/status.h	/^  ~Status() { delete state_; }$/;"	f	class:leveldb::Status
~StringSink	table/table_test.cc	/^  ~StringSink() { }$/;"	f	class:leveldb::StringSink
~StringSource	table/table_test.cc	/^  virtual ~StringSource() { }$/;"	f	class:leveldb::StringSource
~Table	table/table.cc	/^Table::~Table() {$/;"	f	class:leveldb::Table
~TableBuilder	table/table_builder.cc	/^TableBuilder::~TableBuilder() {$/;"	f	class:leveldb::TableBuilder
~TableCache	db/table_cache.cc	/^TableCache::~TableCache() {$/;"	f	class:leveldb::TableCache
~TableConstructor	table/table_test.cc	/^  ~TableConstructor() {$/;"	f	class:leveldb::TableConstructor
~Tester	util/testharness.h	/^  ~Tester() {$/;"	f	class:leveldb::test::Tester
~Thread	util/env_chromium.cc	/^  virtual ~Thread() {}$/;"	f	class:leveldb::__anon20::Thread
~TwoLevelIterator	table/two_level_iterator.cc	/^TwoLevelIterator::~TwoLevelIterator() {$/;"	f	class:leveldb::__anon8::TwoLevelIterator
~Version	db/version_set.cc	/^Version::~Version() {$/;"	f	class:leveldb::Version
~VersionEdit	db/version_edit.h	/^  ~VersionEdit() { }$/;"	f	class:leveldb::VersionEdit
~VersionSet	db/version_set.cc	/^VersionSet::~VersionSet() {$/;"	f	class:leveldb::VersionSet
~WritableFile	util/env.cc	/^WritableFile::~WritableFile() {$/;"	f	class:leveldb::WritableFile
~WriteBatch	db/write_batch.cc	/^WriteBatch::~WriteBatch() { }$/;"	f	class:leveldb::WriteBatch
~Writer	db/log_writer.cc	/^Writer::~Writer() {$/;"	f	class:leveldb::log::Writer
